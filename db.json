{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/browserconfig.xml","path":"browserconfig.xml","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/navy/source/fonts/GTWalsheim-Bold.woff","path":"fonts/GTWalsheim-Bold.woff","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/GTWalsheim-Bold.woff2","path":"fonts/GTWalsheim-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/PostGrotesk-Book.woff","path":"fonts/PostGrotesk-Book.woff","modified":0,"renderable":1},{"_id":"themes/navy/source/img/apple-touch-icon-1024.png","path":"img/apple-touch-icon-1024.png","modified":0,"renderable":1},{"_id":"themes/navy/source/img/apple-touch-icon-180.png","path":"img/apple-touch-icon-180.png","modified":0,"renderable":1},{"_id":"themes/navy/source/img/apple-touch-icon-120.png","path":"img/apple-touch-icon-120.png","modified":0,"renderable":1},{"_id":"themes/navy/source/img/apple-touch-icon-152.png","path":"img/apple-touch-icon-152.png","modified":0,"renderable":1},{"_id":"themes/navy/source/img/apple-touch-icon-76.png","path":"img/apple-touch-icon-76.png","modified":0,"renderable":1},{"_id":"themes/navy/source/img/arrow.svg","path":"img/arrow.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/circle.svg","path":"img/circle.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/close.svg","path":"img/close.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/clippy.svg","path":"img/clippy.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/footer-logo.svg","path":"img/footer-logo.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/funding.svg","path":"img/funding.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon-arrow-down.svg","path":"img/icon-arrow-down.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon-close.svg","path":"img/icon-close.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon-contribute-blue.svg","path":"img/icon-contribute-blue.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon-github-mobile.svg","path":"img/icon-github-mobile.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon-discussion-blue.svg","path":"img/icon-discussion-blue.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon-github.svg","path":"img/icon-github.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon-gitter-mobile.svg","path":"img/icon-gitter-mobile.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon-gitter.svg","path":"img/icon-gitter.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon-join-blue.svg","path":"img/icon-join-blue.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon-menu.svg","path":"img/icon-menu.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon-twitter-mobile.svg","path":"img/icon-twitter-mobile.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon-twitter.svg","path":"img/icon-twitter.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon_fb.svg","path":"img/icon_fb.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon_gh.svg","path":"img/icon_gh.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon_rd.svg","path":"img/icon_rd.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon_ri.svg","path":"img/icon_ri.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon_yt.svg","path":"img/icon_yt.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/icon_tw.svg","path":"img/icon_tw.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/incubate_beaker.svg","path":"img/incubate_beaker.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/legal_reg.svg","path":"img/legal_reg.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/link-arrow.svg","path":"img/link-arrow.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/logo-16.png","path":"img/logo-16.png","modified":0,"renderable":1},{"_id":"themes/navy/source/img/logo-32.png","path":"img/logo-32.png","modified":0,"renderable":1},{"_id":"themes/navy/source/img/logo-dribbble.svg","path":"img/logo-dribbble.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/logo-black.svg","path":"img/logo-black.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/logo-footer.svg","path":"img/logo-footer.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/logo-flat.svg","path":"img/logo-flat.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/logo-status.svg","path":"img/logo-status.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/logo-github.svg","path":"img/logo-github.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/logo-youtube.svg","path":"img/logo-youtube.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/marketing_comm.svg","path":"img/marketing_comm.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/mentorship.svg","path":"img/mentorship.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/product_design.svg","path":"img/product_design.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/status_logo.svg","path":"img/status_logo.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/img/technical_support.svg","path":"img/technical_support.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/navy/source/js/vendor.js","path":"js/vendor.js","modified":0,"renderable":1},{"_id":"themes/navy/source/js/vendor.js.map","path":"js/vendor.js.map","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/archive.scss","path":"scss/archive.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/base.scss","path":"scss/base.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/fonts.scss","path":"scss/fonts.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/colors.scss","path":"scss/colors.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/footer.scss","path":"scss/footer.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/formReset.scss","path":"scss/formReset.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/header.scss","path":"scss/header.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/highlight.scss","path":"scss/highlight.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/index.scss","path":"scss/index.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/main.scss","path":"scss/main.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/page.scss","path":"scss/page.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/popup.scss","path":"scss/popup.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/scss/sidebar.scss","path":"scss/sidebar.scss","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/PostGrotesk-Book.ttf","path":"fonts/PostGrotesk-Book.ttf","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/PostGrotesk-Medium.ttf","path":"fonts/PostGrotesk-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/PostGrotesk-Medium.woff","path":"fonts/PostGrotesk-Medium.woff","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/Inter-UI-Medium.woff2","path":"fonts/Inter-UI-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/Inter-UI-Regular.woff2","path":"fonts/Inter-UI-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/PostGrotesk-Book.eot","path":"fonts/PostGrotesk-Book.eot","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/RobotoRegular/RobotoRegular.eot","path":"fonts/RobotoRegular/RobotoRegular.eot","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/RobotoRegular/RobotoRegular.ttf","path":"fonts/RobotoRegular/RobotoRegular.ttf","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/RobotoRegular/RobotoRegular.woff","path":"fonts/RobotoRegular/RobotoRegular.woff","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/androidstudio.css","path":"js/styles/androidstudio.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/agate.css","path":"js/styles/agate.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/arduino-light.css","path":"js/styles/arduino-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/arta.css","path":"js/styles/arta.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/ascetic.css","path":"js/styles/ascetic.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-cave-dark.css","path":"js/styles/atelier-cave-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-dune-light.css","path":"js/styles/atelier-dune-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-dune-dark.css","path":"js/styles/atelier-dune-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-cave-light.css","path":"js/styles/atelier-cave-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-estuary-dark.css","path":"js/styles/atelier-estuary-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-estuary-light.css","path":"js/styles/atelier-estuary-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-heath-dark.css","path":"js/styles/atelier-heath-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-forest-light.css","path":"js/styles/atelier-forest-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-heath-light.css","path":"js/styles/atelier-heath-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-forest-dark.css","path":"js/styles/atelier-forest-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-lakeside-dark.css","path":"js/styles/atelier-lakeside-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-lakeside-light.css","path":"js/styles/atelier-lakeside-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-plateau-dark.css","path":"js/styles/atelier-plateau-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-plateau-light.css","path":"js/styles/atelier-plateau-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-savanna-dark.css","path":"js/styles/atelier-savanna-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-savanna-light.css","path":"js/styles/atelier-savanna-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-seaside-dark.css","path":"js/styles/atelier-seaside-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-seaside-light.css","path":"js/styles/atelier-seaside-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-sulphurpool-dark.css","path":"js/styles/atelier-sulphurpool-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atelier-sulphurpool-light.css","path":"js/styles/atelier-sulphurpool-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atom-one-dark.css","path":"js/styles/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/atom-one-light.css","path":"js/styles/atom-one-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/brown-paper.css","path":"js/styles/brown-paper.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/codepen-embed.css","path":"js/styles/codepen-embed.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/brown-papersq.png","path":"js/styles/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/color-brewer.css","path":"js/styles/color-brewer.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/darcula.css","path":"js/styles/darcula.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/dark.css","path":"js/styles/dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/darkula.css","path":"js/styles/darkula.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/default.css","path":"js/styles/default.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/docco.css","path":"js/styles/docco.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/dracula.css","path":"js/styles/dracula.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/far.css","path":"js/styles/far.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/foundation.css","path":"js/styles/foundation.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/github-gist.css","path":"js/styles/github-gist.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/github.css","path":"js/styles/github.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/googlecode.css","path":"js/styles/googlecode.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/grayscale.css","path":"js/styles/grayscale.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/gruvbox-dark.css","path":"js/styles/gruvbox-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/gruvbox-light.css","path":"js/styles/gruvbox-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/hopscotch.css","path":"js/styles/hopscotch.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/hybrid.css","path":"js/styles/hybrid.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/idea.css","path":"js/styles/idea.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/ir-black.css","path":"js/styles/ir-black.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/kimbie.dark.css","path":"js/styles/kimbie.dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/kimbie.light.css","path":"js/styles/kimbie.light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/magula.css","path":"js/styles/magula.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/mono-blue.css","path":"js/styles/mono-blue.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/monokai-sublime.css","path":"js/styles/monokai-sublime.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/obsidian.css","path":"js/styles/obsidian.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/monokai.css","path":"js/styles/monokai.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/ocean.css","path":"js/styles/ocean.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/paraiso-dark.css","path":"js/styles/paraiso-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/paraiso-light.css","path":"js/styles/paraiso-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/pojoaque.jpg","path":"js/styles/pojoaque.jpg","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/pojoaque.css","path":"js/styles/pojoaque.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/purebasic.css","path":"js/styles/purebasic.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/qtcreator_dark.css","path":"js/styles/qtcreator_dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/qtcreator_light.css","path":"js/styles/qtcreator_light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/railscasts.css","path":"js/styles/railscasts.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/rainbow.css","path":"js/styles/rainbow.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/routeros.css","path":"js/styles/routeros.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/school-book.css","path":"js/styles/school-book.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/school-book.png","path":"js/styles/school-book.png","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/solarized-dark.css","path":"js/styles/solarized-dark.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/solarized-light.css","path":"js/styles/solarized-light.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/sunburst.css","path":"js/styles/sunburst.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/tomorrow-night-bright.css","path":"js/styles/tomorrow-night-bright.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/tomorrow-night-blue.css","path":"js/styles/tomorrow-night-blue.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/tomorrow-night.css","path":"js/styles/tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/tomorrow-night-eighties.css","path":"js/styles/tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/vs.css","path":"js/styles/vs.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/tomorrow.css","path":"js/styles/tomorrow.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/vs2015.css","path":"js/styles/vs2015.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/xcode.css","path":"js/styles/xcode.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/xt256.css","path":"js/styles/xt256.css","modified":0,"renderable":1},{"_id":"themes/navy/source/js/styles/zenburn.css","path":"js/styles/zenburn.css","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/Inter-UI-Bold.woff2","path":"fonts/Inter-UI-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/Inter-UI-BoldItalic.woff2","path":"fonts/Inter-UI-BoldItalic.woff2","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/Inter-UI-Italic.woff2","path":"fonts/Inter-UI-Italic.woff2","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/Inter-UI-MediumItalic.woff2","path":"fonts/Inter-UI-MediumItalic.woff2","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/Inter-UI-Regular.woff","path":"fonts/Inter-UI-Regular.woff","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/Inter-UI-Bold.woff","path":"fonts/Inter-UI-Bold.woff","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/Inter-UI-Italic.woff","path":"fonts/Inter-UI-Italic.woff","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/Inter-UI-Medium.woff","path":"fonts/Inter-UI-Medium.woff","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/Inter-UI-MediumItalic.woff","path":"fonts/Inter-UI-MediumItalic.woff","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/PostGrotesk-Medium.eot","path":"fonts/PostGrotesk-Medium.eot","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/Inter-UI-BoldItalic.woff","path":"fonts/Inter-UI-BoldItalic.woff","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/PostGrotesk-Medium.svg","path":"fonts/PostGrotesk-Medium.svg","modified":0,"renderable":1},{"_id":"themes/navy/source/fonts/PostGrotesk-Book.svg","path":"fonts/PostGrotesk-Book.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5f91c14c4301d8db36efb9fe206593bf60ffa5e8","modified":1544609960146},{"_id":"source/browserconfig.xml","hash":"adb4cbc9b5bc6e7526871522d199860ee2fd65f4","modified":1544609960149},{"_id":"source/index.md","hash":"d12b19fb2b7b8dce0da020c0438f27b2c776c554","modified":1544609960150},{"_id":"source/robots.txt","hash":"7e49dfd97319f5dd7cdaea8518cf43e0e8d01e5a","modified":1544609960150},{"_id":"source/_data/menu.yml","hash":"9fe5da7dd7fc198763c5ba8fd8d14b67e3807b21","modified":1544609960147},{"_id":"source/_data/sidebar.yml","hash":"f10930456536d2889ea488c7a2c59ecd86deb9c2","modified":1544613357000},{"_id":"source/_data/languages.yml","hash":"74e55635eb66bb12833e42f0d1057b03beb65bcf","modified":1544609960146},{"_id":"source/_posts/2018-10-04-incubate.md","hash":"08adbeeeeefd08cec4afbfa3ff0b1276cb1b61ae","modified":1544609960148},{"_id":"source/api/index.md","hash":"881de192d9f3bbf8bdef392a0d3b3a80569f335f","modified":1547628654486},{"_id":"source/tutorials/go_tutorial.md","hash":"b20974b4273d84cfd53e40fd1a1a5563d39aaedc","modified":1544609960150},{"_id":"source/tutorials/index.md","hash":"54e8f725419b89ebe5aa1a21bba1a1c204113c13","modified":1544609960151},{"_id":"themes/navy/languages/en.yml","hash":"518302a5310404d8c09880d4cbdfa8223c8efa3e","modified":1544609960152},{"_id":"themes/navy/layout/index.swig","hash":"c6236a0e31e68ad85b37258068fccdf05d603093","modified":1544609960153},{"_id":"themes/navy/layout/archive.swig","hash":"6076f145cb3bcc55353e1c6169f4ea7f42461af2","modified":1544609960152},{"_id":"themes/navy/layout/layout.swig","hash":"0209073ec2800370429d9bc0e6ef4d32a52b003d","modified":1544609960153},{"_id":"themes/navy/layout/page.swig","hash":"a50499ca8e150f634b178a269f25427fdd198b36","modified":1544613357003},{"_id":"themes/navy/layout/partial/after_footer.swig","hash":"e8faf987ec0d73b551c243cbff204061a16ca238","modified":1544609960155},{"_id":"themes/navy/layout/partial/comment.swig","hash":"6f5494c97586584884ca8d93b9184d4eadbd8e86","modified":1544609960155},{"_id":"themes/navy/layout/partial/head.swig","hash":"70a2fa82452fcca56d8183f9fa7770962ed26f60","modified":1544609960156},{"_id":"themes/navy/layout/partial/mobile_nav.swig","hash":"091be443f0a7d6bb4ba8c707f05fe9b8a1b8cde2","modified":1544609960157},{"_id":"themes/navy/layout/partial/header.swig","hash":"f8c2d3cf32ee8d91dbc225508bc8c676b60f6f38","modified":1544609960157},{"_id":"themes/navy/layout/partial/post.swig","hash":"e75df7f513ec321d2a95b8f689470adbab955760","modified":1544609960158},{"_id":"themes/navy/layout/partial/share.swig","hash":"c5d108982425a9b1a63c062b6773c4cdd43024ce","modified":1544609960158},{"_id":"themes/navy/layout/partial/sidebar.swig","hash":"6bb7120a1ab8eadf5089d16f63100ce7f36d7343","modified":1544609960163},{"_id":"themes/navy/layout/partial/theme.swig","hash":"414bd84be19a8c19c0d901a4f2574c8298c4e111","modified":1544609960163},{"_id":"themes/navy/layout/partial/tutorial.swig","hash":"8cdc4618ddfe277604895e7a37d76f3f54bb7556","modified":1544609960163},{"_id":"themes/navy/source/fonts/GTWalsheim-Bold.woff","hash":"32948c987f6e798d289d7e54fc457b390cead30b","modified":1544609960164},{"_id":"themes/navy/source/fonts/GTWalsheim-Bold.woff2","hash":"95267ddeb508fff67420bcbdd6fb18c8994da3af","modified":1544609960165},{"_id":"themes/navy/source/fonts/PostGrotesk-Book.woff","hash":"d65f746630c83d89cd5da6e08f4cbb7b522a1176","modified":1544609960184},{"_id":"themes/navy/source/img/apple-touch-icon-1024.png","hash":"a55715cf24bc071478bbb7d0124f60761dff8a40","modified":1544609960193},{"_id":"themes/navy/source/img/apple-touch-icon-180.png","hash":"6911dee3827473345f81e1f7ea7422c52c1d0627","modified":1544609960195},{"_id":"themes/navy/source/img/apple-touch-icon-120.png","hash":"0502d7eb9584efa325830cf588001c2aef129063","modified":1544609960193},{"_id":"themes/navy/source/img/apple-touch-icon-152.png","hash":"420c42bfcc4b487b3a70eb06dc5d4ea0ffcdbbe1","modified":1544609960194},{"_id":"themes/navy/source/img/apple-touch-icon-76.png","hash":"2adb7bd7332d523749f6b8757b4b986b0dd32a57","modified":1544609960195},{"_id":"themes/navy/source/img/arrow.svg","hash":"5e77ef571583e45192a76885f51e95e55a154d93","modified":1544609960196},{"_id":"themes/navy/source/img/circle.svg","hash":"4c3fd2f97fa2ada817bfcb081bdcc2d0d288be6c","modified":1544609960196},{"_id":"themes/navy/source/img/close.svg","hash":"dd96a639e6afebe8e1c43c5eea397950a290dc42","modified":1544609960197},{"_id":"themes/navy/source/img/clippy.svg","hash":"386f533083a450bb34f87dab852e495195a7fddb","modified":1544609960197},{"_id":"themes/navy/source/img/footer-logo.svg","hash":"0a4b5ad7aaddf5085b4413e1958ce0f11c87f2c5","modified":1544609960198},{"_id":"themes/navy/source/img/funding.svg","hash":"de90fec4d7bcbbdbda74145d52be5d3cc3d17a61","modified":1544609960198},{"_id":"themes/navy/source/img/icon-arrow-down.svg","hash":"1974bd9f76f041dfd01754152a35c8c641ca981b","modified":1544609960199},{"_id":"themes/navy/source/img/icon-close.svg","hash":"8e19984a84534fbebeae7fa1c5d634d2b9e79ed8","modified":1544609960199},{"_id":"themes/navy/source/img/icon-contribute-blue.svg","hash":"39abb4ebba6618172f7954bd4ca0280983532501","modified":1544609960200},{"_id":"themes/navy/source/img/icon-github-mobile.svg","hash":"388914e14c23a3084fbffea5e634cd467353d180","modified":1544609960201},{"_id":"themes/navy/source/img/icon-discussion-blue.svg","hash":"7c251bcdf17e7cde71c60e4422d2d3c0accf2a03","modified":1544609960200},{"_id":"themes/navy/source/img/icon-github.svg","hash":"e359a807a062cfe17fffc79d35885a448c0b4caf","modified":1544609960201},{"_id":"themes/navy/source/img/icon-gitter-mobile.svg","hash":"3f1486e02d7fbf67b1e17df216b2d2c077d6bea1","modified":1544609960202},{"_id":"themes/navy/source/img/icon-gitter.svg","hash":"c9f157c50409187c48855adc8b50aeb82849060c","modified":1544609960202},{"_id":"themes/navy/source/img/icon-join-blue.svg","hash":"0ec731f6c295a6e7f0d6283c8439beb7d95310b6","modified":1544609960203},{"_id":"themes/navy/source/img/icon-menu.svg","hash":"67498a8b63ecda345c9ad767ae744bce814cd532","modified":1544609960203},{"_id":"themes/navy/source/img/icon-twitter-mobile.svg","hash":"234bff41b8a5c37a4e3742e0762c4d670ad49e38","modified":1544609960204},{"_id":"themes/navy/source/img/icon-twitter.svg","hash":"83274ec106864a2cd9aa7d4997b10f864195ff5a","modified":1544609960204},{"_id":"themes/navy/source/img/icon_fb.svg","hash":"7b2b44b6bc9768ee15f4f26f4da614a86e6fd18d","modified":1544609960205},{"_id":"themes/navy/source/img/icon_gh.svg","hash":"6229f2ef4fa907f9ccf0bbb839a406aa5bb45ef2","modified":1544609960205},{"_id":"themes/navy/source/img/icon_rd.svg","hash":"4c910721d50f5554048771e922b37afb4f812257","modified":1544609960206},{"_id":"themes/navy/source/img/icon_ri.svg","hash":"f31fbefda73ad806fe0e4338a73e04a7ddeb49b1","modified":1544609960206},{"_id":"themes/navy/source/img/icon_yt.svg","hash":"4413001c81c697cf8564f09972858b0d9a1c142e","modified":1544609960207},{"_id":"themes/navy/source/img/icon_tw.svg","hash":"e08f16d1fed449a70511af301f75dc7b660b5992","modified":1544609960207},{"_id":"themes/navy/source/img/incubate_beaker.svg","hash":"2152a4313242a159947ee4820da44b337b7fdad5","modified":1544609960207},{"_id":"themes/navy/source/img/legal_reg.svg","hash":"a4c4d62a28cad2e71265469cb1a7a04ea40c8c9f","modified":1544609960208},{"_id":"themes/navy/source/img/link-arrow.svg","hash":"83418d8c8fb726909c67e28a44860faf3ee61839","modified":1544609960208},{"_id":"themes/navy/source/img/logo-16.png","hash":"52e283cbaaa297fdd0925d9d2d700d6e2b9dbcca","modified":1544609960210},{"_id":"themes/navy/source/img/logo-32.png","hash":"7b2f46c4f1fb0b76048d69da225109f576f82ed8","modified":1544609960210},{"_id":"themes/navy/source/img/logo-dribbble.svg","hash":"476419dd573a8fd23c072beb2c5ce50c3afa77d1","modified":1544609960211},{"_id":"themes/navy/source/img/logo-black.svg","hash":"c468f15ceb77914466b483c5f5237cd32b72723b","modified":1544609960211},{"_id":"themes/navy/source/img/logo-footer.svg","hash":"00b5d579f1675f01a03912cd3af70ef7748fdef9","modified":1544609960212},{"_id":"themes/navy/source/img/logo-flat.svg","hash":"44473193100b9dd07760a2eeebae1ddffe3c3fd1","modified":1544609960212},{"_id":"themes/navy/source/img/logo-status.svg","hash":"ac6d61eacd2634b08819ce4b641411806903a820","modified":1544609960213},{"_id":"themes/navy/source/img/logo-github.svg","hash":"60358ac6ecddf611fe7cb1928197f4c75163c3a9","modified":1544609960213},{"_id":"themes/navy/source/img/logo-youtube.svg","hash":"3ae5d09fa03adc4e8fdbef19db2d1aa11fe95cd4","modified":1544609960214},{"_id":"themes/navy/source/img/logo.svg","hash":"55bce003cf21684686f6968d2e1264c92a52744f","modified":1544609960214},{"_id":"themes/navy/source/img/marketing_comm.svg","hash":"e63b7dec56daf0bbc587a201d9b501e56f9d2817","modified":1544609960215},{"_id":"themes/navy/source/img/mentorship.svg","hash":"4d65cdd9dcd1746a720cf2780520d03742dcb08d","modified":1544609960215},{"_id":"themes/navy/source/img/product_design.svg","hash":"0d8816bac119f96fb16a0a998251746c73b3deb7","modified":1544609960216},{"_id":"themes/navy/source/img/status_logo.svg","hash":"98b9dabe54674dc55d03196bcb2650be8af5441c","modified":1544609960216},{"_id":"themes/navy/source/img/technical_support.svg","hash":"0e334805845d145abcdcced17d677dd2f153cfca","modified":1544609960217},{"_id":"themes/navy/source/js/main.js","hash":"33222c9e6cccc6923fbf502ed11ea5eaa232f6f1","modified":1544609960218},{"_id":"themes/navy/source/js/vendor.js","hash":"788f005abc61d3e9f0f91cadb981664e87d37fe5","modified":1544613285181},{"_id":"themes/navy/source/js/vendor.js.map","hash":"3bdb57f6252e6e6025e4c9fee89dc385bdb4c5d2","modified":1544613285177},{"_id":"themes/navy/source/scss/_variables.scss","hash":"d51d45133f4c2bed4ab2d9778addbd18868981c2","modified":1544609960259},{"_id":"themes/navy/source/scss/archive.scss","hash":"ede7e53a832bf717ebd71b5c986be22d0a3185dd","modified":1544609960259},{"_id":"themes/navy/source/scss/base.scss","hash":"7685e0948b092ac2308b2e842e944aa450e177bd","modified":1544609960259},{"_id":"themes/navy/source/scss/fonts.scss","hash":"bf5c7f0d6789b2ce1a45cbcd9a1bb5e5b17d5b0e","modified":1544609960260},{"_id":"themes/navy/source/scss/colors.scss","hash":"a9e24cea9b3b37a32dfce9c80dc27f970b9a38ff","modified":1544609960260},{"_id":"themes/navy/source/scss/footer.scss","hash":"89ef743275dcb564ca1cfe18404b3b1f7c5e375f","modified":1544609960261},{"_id":"themes/navy/source/scss/formReset.scss","hash":"bf4b9f20523fc5907dfb438f6fac20201bb626cf","modified":1544609960261},{"_id":"themes/navy/source/scss/header.scss","hash":"3921b1418b6d640a41dcfa72089d5ce316e32a1e","modified":1544609960262},{"_id":"themes/navy/source/scss/highlight.scss","hash":"12e0566bea22131ec402193ef9e6942f3e2ca40b","modified":1544609960262},{"_id":"themes/navy/source/scss/index.scss","hash":"7fff944e00ed147f1790b83be1c7647ca0dc14ae","modified":1544609960263},{"_id":"themes/navy/source/scss/main.scss","hash":"80fc4723dea991b40fdf62959d8e84b50db032b2","modified":1544609960263},{"_id":"themes/navy/source/scss/page.scss","hash":"c4ecdec36bf933ba7849e9d7fecfa1ca719dbb87","modified":1544609960264},{"_id":"themes/navy/source/scss/popup.scss","hash":"5830b5d3679d51a32653a2a4d8b1155b32bb13a5","modified":1544609960264},{"_id":"themes/navy/source/scss/sidebar.scss","hash":"c51af117e47dd302edf188f43629cb6036797095","modified":1544609960265},{"_id":"themes/navy/source/fonts/PostGrotesk-Book.ttf","hash":"3a85fb6216d4cc0fc888da2b919a8b1effee12de","modified":1544609960183},{"_id":"themes/navy/source/fonts/PostGrotesk-Medium.ttf","hash":"2795ef51769efc5b85e8170a6423dfe71e31341c","modified":1544609960188},{"_id":"themes/navy/source/fonts/PostGrotesk-Medium.woff","hash":"5e5549a6b44673303caf45984a7a6b4f00bcf0d3","modified":1544609960189},{"_id":"themes/navy/layout/partial/shared-partials/LICENSE","hash":"d22157abc0fc0b4ae96380c09528e23cf77290a9","modified":1544609960159},{"_id":"themes/navy/layout/partial/shared-partials/README.md","hash":"7b7c568bb486a3ba1d7c43b11ee4c3d1dd24b27c","modified":1544609960159},{"_id":"themes/navy/source/fonts/Inter-UI-Medium.woff2","hash":"fc61451b9c27e2df7cad509d103a705a32ffc453","modified":1544609960174},{"_id":"themes/navy/source/fonts/Inter-UI-Regular.woff2","hash":"96f5364d43c588110e3a3ab447d9b377eed80409","modified":1544609960179},{"_id":"themes/navy/source/fonts/PostGrotesk-Book.eot","hash":"264f4f9745237ca98b3cd796bf2d3a21b232e6c5","modified":1544609960180},{"_id":"themes/navy/source/fonts/RobotoRegular/RobotoRegular.eot","hash":"f045fe2f6ec39d5d794e31e9ab621fdd230c0696","modified":1544609960190},{"_id":"themes/navy/source/fonts/RobotoRegular/RobotoRegular.ttf","hash":"af03242b7545da3e54913906aaadce6a55c5f3bd","modified":1544609960191},{"_id":"themes/navy/source/fonts/RobotoRegular/RobotoRegular.woff","hash":"c729757be40622e32a3cdee9e9ad4eabf80d38bc","modified":1544609960192},{"_id":"themes/navy/source/js/styles/androidstudio.css","hash":"958baa24814c06a625612a3b2b478d54bc1bf1b1","modified":1544609960219},{"_id":"themes/navy/source/js/styles/agate.css","hash":"8e122b0f00f5a7ec4e6dc492bf1560441eeef7f0","modified":1544609960218},{"_id":"themes/navy/source/js/styles/arduino-light.css","hash":"c6e05580b51b755e229e99eb156940ad2cab192b","modified":1544609960219},{"_id":"themes/navy/source/js/styles/arta.css","hash":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584","modified":1544609960219},{"_id":"themes/navy/source/js/styles/ascetic.css","hash":"6358377b5c25667886aca0d605cbc497cf02405f","modified":1544609960221},{"_id":"themes/navy/source/js/styles/atelier-cave-dark.css","hash":"f397d4418ce88b998841fd9135242461ba1a79b5","modified":1544609960221},{"_id":"themes/navy/source/js/styles/atelier-dune-light.css","hash":"7ba074de897e6a5e27d8b97f7cd06c1746474e72","modified":1544609960223},{"_id":"themes/navy/source/js/styles/atelier-dune-dark.css","hash":"081d73e454db140cd41b2bb595be297cfcab25e0","modified":1544609960222},{"_id":"themes/navy/source/js/styles/atelier-cave-light.css","hash":"2933f0247ac6d84c2954dd4946e359853abbf70a","modified":1544609960222},{"_id":"themes/navy/source/js/styles/atelier-estuary-dark.css","hash":"a0c46a0f955e3864f5e967ea93f5e61519a17be8","modified":1544609960223},{"_id":"themes/navy/source/js/styles/atelier-estuary-light.css","hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1544609960223},{"_id":"themes/navy/source/js/styles/atelier-heath-dark.css","hash":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78","modified":1544609960225},{"_id":"themes/navy/source/js/styles/atelier-forest-light.css","hash":"8a78a4eea0f32d094d1f9e316d59e990ba739d97","modified":1544609960224},{"_id":"themes/navy/source/js/styles/atelier-heath-light.css","hash":"172b98f783d213a20211ec6aca9a3840ba524f55","modified":1544609960225},{"_id":"themes/navy/source/js/styles/atelier-forest-dark.css","hash":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101","modified":1544609960224},{"_id":"themes/navy/source/js/styles/atelier-lakeside-dark.css","hash":"fa707b252d5d5caccc0589374522bed47b7ca100","modified":1544609960226},{"_id":"themes/navy/source/js/styles/atelier-lakeside-light.css","hash":"8ba595b9ba6e8be6dc029bf80caab38e85aed686","modified":1544609960226},{"_id":"themes/navy/source/js/styles/atelier-plateau-dark.css","hash":"240f79f4e1fd63485c13900875b64c5a0d1bd06d","modified":1544609960227},{"_id":"themes/navy/source/js/styles/atelier-plateau-light.css","hash":"9731db1052f23351c983210701edd3f5ceed343f","modified":1544609960227},{"_id":"themes/navy/source/js/styles/atelier-savanna-dark.css","hash":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a","modified":1544609960228},{"_id":"themes/navy/source/js/styles/atelier-savanna-light.css","hash":"6bd3a62c32558476d436bd389500e5fbeb693d67","modified":1544609960228},{"_id":"themes/navy/source/js/styles/atelier-seaside-dark.css","hash":"b2800804a21f729a3d0a16b3aadc17679fd0639c","modified":1544609960229},{"_id":"themes/navy/source/js/styles/atelier-seaside-light.css","hash":"3e6b9e2a3a5de455490b8224401f19702df4cde9","modified":1544609960229},{"_id":"themes/navy/source/js/styles/atelier-sulphurpool-dark.css","hash":"1f006f8bd28e2ffbb73f708769605ba766787fff","modified":1544609960230},{"_id":"themes/navy/source/js/styles/atelier-sulphurpool-light.css","hash":"0319c3eea893601b79b6c57652ef49b9222cc9de","modified":1544609960230},{"_id":"themes/navy/source/js/styles/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1544609960231},{"_id":"themes/navy/source/js/styles/atom-one-light.css","hash":"eda63d8cce440dbf3bb823e10577a134e9941deb","modified":1544609960231},{"_id":"themes/navy/source/js/styles/brown-paper.css","hash":"a6817d890e58f80ce79d87620791dae821a70fff","modified":1544609960231},{"_id":"themes/navy/source/js/styles/codepen-embed.css","hash":"c4520e45d18259817b8942d17971f27c94f0fb09","modified":1544609960232},{"_id":"themes/navy/source/js/styles/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1544609960232},{"_id":"themes/navy/source/js/styles/color-brewer.css","hash":"96332573db854e7b7411caa94ba29b238fede2d3","modified":1544609960233},{"_id":"themes/navy/source/js/styles/darcula.css","hash":"7740224d07375ddc321147dffabbfa83e39f0d8b","modified":1544609960233},{"_id":"themes/navy/source/js/styles/dark.css","hash":"fc77519d4f5d731054c5d4b7e7bbdbb510833271","modified":1544609960234},{"_id":"themes/navy/source/js/styles/darkula.css","hash":"0be948bb84acc05f93a1e5e9b48fe34cf61673a0","modified":1544609960234},{"_id":"themes/navy/source/js/styles/default.css","hash":"fba68624d1b34a5543fe0bf4b2af2ac1ddf65e74","modified":1544609960235},{"_id":"themes/navy/source/js/styles/docco.css","hash":"1be7be09a1b927c22c7f11451becdb335145bdd2","modified":1544609960235},{"_id":"themes/navy/source/js/styles/dracula.css","hash":"2633f2e84680e9f381e9ac1df344b542e28f9774","modified":1544609960235},{"_id":"themes/navy/source/js/styles/far.css","hash":"67e0658b2376e91e4894636a3522a30c2aec42de","modified":1544609960236},{"_id":"themes/navy/source/js/styles/foundation.css","hash":"75b0674dd1ed35d61977bd5c35dc29ca35835a7b","modified":1544609960236},{"_id":"themes/navy/source/js/styles/github-gist.css","hash":"77cf684fda415812d6279a52f299c84850244778","modified":1544609960237},{"_id":"themes/navy/source/js/styles/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1544609960237},{"_id":"themes/navy/source/js/styles/googlecode.css","hash":"fed3d439d0c305b337dd9c0f68dcbfa51429f445","modified":1544609960237},{"_id":"themes/navy/source/js/styles/grayscale.css","hash":"5688658c28fc5799517e8f3c224ae3da3797ba44","modified":1544609960238},{"_id":"themes/navy/source/js/styles/gruvbox-dark.css","hash":"aaf90d076e34bc44016462d70f83985e0e55c8dc","modified":1544609960238},{"_id":"themes/navy/source/js/styles/gruvbox-light.css","hash":"084699ab0aa326fede86e38bf41ebe49edde3a90","modified":1544609960239},{"_id":"themes/navy/source/js/styles/hopscotch.css","hash":"03e7b9ec74bbd375db8d476836aac3729a6c86e8","modified":1544609960239},{"_id":"themes/navy/source/js/styles/hybrid.css","hash":"1e2d54598b5f948b597059909d4bd158b7df021f","modified":1544609960240},{"_id":"themes/navy/source/js/styles/idea.css","hash":"164649ae1e7c891a0d88cca075521af28656e2a1","modified":1544609960240},{"_id":"themes/navy/source/js/styles/ir-black.css","hash":"95aad65ba77183500ce0f7ad62a7535b647ee20c","modified":1544609960241},{"_id":"themes/navy/source/js/styles/kimbie.dark.css","hash":"58ed061c204fbc09d221ee9135d66bad976e5fc3","modified":1544609960241},{"_id":"themes/navy/source/js/styles/kimbie.light.css","hash":"b7aa9b1b21a25dfefcac7649a328962f84c47913","modified":1544609960242},{"_id":"themes/navy/source/js/styles/magula.css","hash":"ebc291f90e456abeeccb16937e7f51735733f4f7","modified":1544609960242},{"_id":"themes/navy/source/js/styles/mono-blue.css","hash":"fd0f39cd4c93ccb8d0bb2f6a1f359522e15a89cb","modified":1544609960243},{"_id":"themes/navy/source/js/styles/monokai-sublime.css","hash":"e4f3df87cbfa634c86b489e9cc43acf44d415986","modified":1544609960243},{"_id":"themes/navy/source/js/styles/obsidian.css","hash":"6ed475813fe4886a58b236297862ff2f181e66f7","modified":1544609960245},{"_id":"themes/navy/source/js/styles/monokai.css","hash":"f69df92e3ccdce28e6f811ec84f11698f2811198","modified":1544609960245},{"_id":"themes/navy/source/js/styles/ocean.css","hash":"fce6858e1c5eb9d2857cb5b5d24069c5994cfc91","modified":1544609960246},{"_id":"themes/navy/source/js/styles/paraiso-dark.css","hash":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341","modified":1544609960246},{"_id":"themes/navy/source/js/styles/paraiso-light.css","hash":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8","modified":1544609960247},{"_id":"themes/navy/source/js/styles/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1544609960247},{"_id":"themes/navy/source/js/styles/pojoaque.css","hash":"4e1e6a431212f5043a550474a1acda63362cdd6f","modified":1544609960247},{"_id":"themes/navy/source/js/styles/purebasic.css","hash":"f353a2cedf3f261a0676fce7c824bdd2e8197775","modified":1544609960248},{"_id":"themes/navy/source/js/styles/qtcreator_dark.css","hash":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba","modified":1544609960248},{"_id":"themes/navy/source/js/styles/qtcreator_light.css","hash":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878","modified":1544609960249},{"_id":"themes/navy/source/js/styles/railscasts.css","hash":"a6d2043478fae5915926914cbd96fe9b706d98a6","modified":1544609960249},{"_id":"themes/navy/source/js/styles/rainbow.css","hash":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e","modified":1544609960249},{"_id":"themes/navy/source/js/styles/routeros.css","hash":"fc5db7c8f18d6b31ad92df21a51e7867d459af19","modified":1544609960250},{"_id":"themes/navy/source/js/styles/school-book.css","hash":"60fe3d8063b1acc4d52de02033095adb0a2b35a9","modified":1544609960251},{"_id":"themes/navy/source/js/styles/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1544609960251},{"_id":"themes/navy/source/js/styles/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1544609960251},{"_id":"themes/navy/source/js/styles/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1544609960252},{"_id":"themes/navy/source/js/styles/sunburst.css","hash":"8309eab2e5b1765dbee81a626baacbdad869b76a","modified":1544609960252},{"_id":"themes/navy/source/js/styles/tomorrow-night-bright.css","hash":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89","modified":1544609960253},{"_id":"themes/navy/source/js/styles/tomorrow-night-blue.css","hash":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f","modified":1544609960253},{"_id":"themes/navy/source/js/styles/tomorrow-night.css","hash":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16","modified":1544609960255},{"_id":"themes/navy/source/js/styles/tomorrow-night-eighties.css","hash":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061","modified":1544609960254},{"_id":"themes/navy/source/js/styles/vs.css","hash":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa","modified":1544609960255},{"_id":"themes/navy/source/js/styles/tomorrow.css","hash":"163593ad70770d0296c5e643fa62e58e63f1b340","modified":1544609960255},{"_id":"themes/navy/source/js/styles/vs2015.css","hash":"3c7fa677de2a785d90fc6c3f7520ac1b11bfd37a","modified":1544609960256},{"_id":"themes/navy/source/js/styles/xcode.css","hash":"65d775a7e11e238c91e0d3c7370547348c92d6b3","modified":1544609960256},{"_id":"themes/navy/source/js/styles/xt256.css","hash":"bbe28ec69177699cb6300d777598adf6323f7861","modified":1544609960257},{"_id":"themes/navy/source/js/styles/zenburn.css","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1544609960257},{"_id":"themes/navy/source/fonts/Inter-UI-Bold.woff2","hash":"51e75c772ad5bb111cf98d4ceb349cfdaf709252","modified":1544609960168},{"_id":"themes/navy/source/fonts/Inter-UI-BoldItalic.woff2","hash":"cfded946f4f1f1b25c57f76f9bd291fa1af02feb","modified":1544609960170},{"_id":"themes/navy/source/fonts/Inter-UI-Italic.woff2","hash":"bc95f46cc6172ab234234688a44b2372688d9b40","modified":1544609960172},{"_id":"themes/navy/source/fonts/Inter-UI-MediumItalic.woff2","hash":"6e03a165a849a462536ae429e7d8ee47f5e0b557","modified":1544609960176},{"_id":"themes/navy/source/fonts/Inter-UI-Regular.woff","hash":"4b8534f53317657526b9d0fa620f80754b4d0c99","modified":1544609960178},{"_id":"themes/navy/layout/partial/shared-partials/partials/after_footer.swig","hash":"e0732a96599f76aa3865f9a08f4fccf92f03d885","modified":1544609960160},{"_id":"themes/navy/layout/partial/shared-partials/partials/footer.swig","hash":"6e85d1d837ca233c392aecb8c3378b9f1e0d8ae8","modified":1544609960161},{"_id":"themes/navy/layout/partial/shared-partials/partials/head.swig","hash":"1b6d8673e3ba3b93524e5c8602a01a998f978af2","modified":1544609960161},{"_id":"themes/navy/layout/partial/shared-partials/partials/community-popup.swig","hash":"5fda1bb15cb009a7b2eab9d0aa1f40a5fc94311e","modified":1544609960160},{"_id":"themes/navy/layout/partial/shared-partials/partials/header-nav.swig","hash":"c9832d7ffe487124b44718689a125f2a035d652f","modified":1544609960162},{"_id":"themes/navy/source/fonts/Inter-UI-Bold.woff","hash":"bce41a7fe8e352983cfbcebaa6e93dff9623c2e5","modified":1544609960167},{"_id":"themes/navy/layout/partial/shared-partials/partials/projects-popup.swig","hash":"0c514745e5f02128c1819c2b002c8f01a6678723","modified":1544609960162},{"_id":"themes/navy/source/fonts/Inter-UI-Italic.woff","hash":"92dd7479c19e382e450ab5c22e3d20df5321100e","modified":1544609960171},{"_id":"themes/navy/source/fonts/Inter-UI-Medium.woff","hash":"5e8f0fed42fcf3712aee462932fdc42f7f2a5e55","modified":1544609960173},{"_id":"themes/navy/source/fonts/Inter-UI-MediumItalic.woff","hash":"34a733edd673806091ae1b37e8692099b63c59e5","modified":1544609960175},{"_id":"themes/navy/source/fonts/PostGrotesk-Medium.eot","hash":"f20a35250d91f6f46e477eda052171180c06a265","modified":1544609960185},{"_id":"themes/navy/source/fonts/Inter-UI-BoldItalic.woff","hash":"9416a3cfc5ea0ec650e9065162f78db92b270ac6","modified":1544609960169},{"_id":"themes/navy/source/fonts/PostGrotesk-Medium.svg","hash":"e911d4b378f3d51de05c484262caca8f03872cbf","modified":1544609960187},{"_id":"themes/navy/source/fonts/PostGrotesk-Book.svg","hash":"ba365bd7c5413c3c5426efb31aa6ab8ce0e56633","modified":1544609960182},{"_id":"public/sitemap.xml","hash":"4c4af2f10d1217c6ed1101152b2dc75fa556530c","modified":1547714079941},{"_id":"public/atom.xml","hash":"a7b763735424efc9f6f87cce94714ec33a1bdbd4","modified":1544613427895},{"_id":"public/index.html","hash":"61fd2170400c44b49be42f0d935b1d62d7e90f12","modified":1544613428022},{"_id":"public/tutorials/go_tutorial.html","hash":"e39313de0e46b4971a79fb00e1b15bb34157a59a","modified":1544613428023},{"_id":"public/tutorials/index.html","hash":"e2003da807798bfccebcb6820a85aa91fe52fa4c","modified":1544613428023},{"_id":"public/news/2018/10/04/incubate/index.html","hash":"1eaa249cb0ef334536a8c716806b2d6e75e4ad04","modified":1544613428023},{"_id":"public/news/2018/index.html","hash":"d0baf559e440006b1d55a06172ee15c86d0f7060","modified":1544613428023},{"_id":"public/news/index.html","hash":"a46843c95239a691adb432f68b6c7d027c06a626","modified":1544613428023},{"_id":"public/api/index.html","hash":"15e03f5740b162e6c1c5e8e20b6e7121e7159935","modified":1547714080131},{"_id":"public/news/2018/10/index.html","hash":"c6cfba8495a319077b3b1eceb03b7ac29a895f02","modified":1544613428023},{"_id":"public/CNAME","hash":"5f91c14c4301d8db36efb9fe206593bf60ffa5e8","modified":1544613428046},{"_id":"public/browserconfig.xml","hash":"adb4cbc9b5bc6e7526871522d199860ee2fd65f4","modified":1544613428046},{"_id":"public/robots.txt","hash":"7e49dfd97319f5dd7cdaea8518cf43e0e8d01e5a","modified":1544613428046},{"_id":"public/fonts/GTWalsheim-Bold.woff2","hash":"95267ddeb508fff67420bcbdd6fb18c8994da3af","modified":1544613428065},{"_id":"public/fonts/GTWalsheim-Bold.woff","hash":"32948c987f6e798d289d7e54fc457b390cead30b","modified":1544613428046},{"_id":"public/img/apple-touch-icon-1024.png","hash":"a55715cf24bc071478bbb7d0124f60761dff8a40","modified":1544613428046},{"_id":"public/img/apple-touch-icon-180.png","hash":"6911dee3827473345f81e1f7ea7422c52c1d0627","modified":1544613428046},{"_id":"public/img/apple-touch-icon-120.png","hash":"0502d7eb9584efa325830cf588001c2aef129063","modified":1544613428047},{"_id":"public/img/apple-touch-icon-152.png","hash":"420c42bfcc4b487b3a70eb06dc5d4ea0ffcdbbe1","modified":1544613428047},{"_id":"public/img/apple-touch-icon-76.png","hash":"2adb7bd7332d523749f6b8757b4b986b0dd32a57","modified":1544613428047},{"_id":"public/img/arrow.svg","hash":"5e77ef571583e45192a76885f51e95e55a154d93","modified":1544613428047},{"_id":"public/img/circle.svg","hash":"4c3fd2f97fa2ada817bfcb081bdcc2d0d288be6c","modified":1544613428047},{"_id":"public/img/close.svg","hash":"dd96a639e6afebe8e1c43c5eea397950a290dc42","modified":1544613428047},{"_id":"public/img/clippy.svg","hash":"386f533083a450bb34f87dab852e495195a7fddb","modified":1544613428047},{"_id":"public/img/footer-logo.svg","hash":"0a4b5ad7aaddf5085b4413e1958ce0f11c87f2c5","modified":1544613428047},{"_id":"public/img/funding.svg","hash":"de90fec4d7bcbbdbda74145d52be5d3cc3d17a61","modified":1544613428047},{"_id":"public/img/icon-arrow-down.svg","hash":"1974bd9f76f041dfd01754152a35c8c641ca981b","modified":1544613428048},{"_id":"public/img/icon-close.svg","hash":"8e19984a84534fbebeae7fa1c5d634d2b9e79ed8","modified":1544613428048},{"_id":"public/img/icon-contribute-blue.svg","hash":"39abb4ebba6618172f7954bd4ca0280983532501","modified":1544613428048},{"_id":"public/img/icon-github-mobile.svg","hash":"388914e14c23a3084fbffea5e634cd467353d180","modified":1544613428048},{"_id":"public/img/icon-discussion-blue.svg","hash":"7c251bcdf17e7cde71c60e4422d2d3c0accf2a03","modified":1544613428048},{"_id":"public/img/icon-github.svg","hash":"e359a807a062cfe17fffc79d35885a448c0b4caf","modified":1544613428048},{"_id":"public/img/icon-gitter-mobile.svg","hash":"3f1486e02d7fbf67b1e17df216b2d2c077d6bea1","modified":1544613428048},{"_id":"public/img/icon-gitter.svg","hash":"c9f157c50409187c48855adc8b50aeb82849060c","modified":1544613428048},{"_id":"public/img/icon-join-blue.svg","hash":"0ec731f6c295a6e7f0d6283c8439beb7d95310b6","modified":1544613428048},{"_id":"public/img/icon-menu.svg","hash":"67498a8b63ecda345c9ad767ae744bce814cd532","modified":1544613428048},{"_id":"public/img/icon-twitter-mobile.svg","hash":"234bff41b8a5c37a4e3742e0762c4d670ad49e38","modified":1544613428049},{"_id":"public/img/icon_fb.svg","hash":"7b2b44b6bc9768ee15f4f26f4da614a86e6fd18d","modified":1544613428049},{"_id":"public/img/icon-twitter.svg","hash":"83274ec106864a2cd9aa7d4997b10f864195ff5a","modified":1544613428049},{"_id":"public/img/icon_gh.svg","hash":"6229f2ef4fa907f9ccf0bbb839a406aa5bb45ef2","modified":1544613428049},{"_id":"public/img/icon_rd.svg","hash":"4c910721d50f5554048771e922b37afb4f812257","modified":1544613428049},{"_id":"public/img/icon_ri.svg","hash":"f31fbefda73ad806fe0e4338a73e04a7ddeb49b1","modified":1544613428049},{"_id":"public/img/icon_tw.svg","hash":"e08f16d1fed449a70511af301f75dc7b660b5992","modified":1544613428050},{"_id":"public/img/icon_yt.svg","hash":"4413001c81c697cf8564f09972858b0d9a1c142e","modified":1544613428049},{"_id":"public/img/incubate_beaker.svg","hash":"2152a4313242a159947ee4820da44b337b7fdad5","modified":1544613428049},{"_id":"public/img/legal_reg.svg","hash":"a4c4d62a28cad2e71265469cb1a7a04ea40c8c9f","modified":1544613428049},{"_id":"public/img/link-arrow.svg","hash":"83418d8c8fb726909c67e28a44860faf3ee61839","modified":1544613428050},{"_id":"public/img/logo-32.png","hash":"7b2f46c4f1fb0b76048d69da225109f576f82ed8","modified":1544613428050},{"_id":"public/img/logo-16.png","hash":"52e283cbaaa297fdd0925d9d2d700d6e2b9dbcca","modified":1544613428050},{"_id":"public/img/logo-dribbble.svg","hash":"476419dd573a8fd23c072beb2c5ce50c3afa77d1","modified":1544613428050},{"_id":"public/img/logo-black.svg","hash":"c468f15ceb77914466b483c5f5237cd32b72723b","modified":1544613428050},{"_id":"public/img/logo-footer.svg","hash":"00b5d579f1675f01a03912cd3af70ef7748fdef9","modified":1544613428050},{"_id":"public/img/logo-flat.svg","hash":"44473193100b9dd07760a2eeebae1ddffe3c3fd1","modified":1544613428050},{"_id":"public/img/logo-status.svg","hash":"ac6d61eacd2634b08819ce4b641411806903a820","modified":1544613428050},{"_id":"public/img/logo-github.svg","hash":"60358ac6ecddf611fe7cb1928197f4c75163c3a9","modified":1544613428050},{"_id":"public/img/logo.svg","hash":"55bce003cf21684686f6968d2e1264c92a52744f","modified":1544613428050},{"_id":"public/img/marketing_comm.svg","hash":"e63b7dec56daf0bbc587a201d9b501e56f9d2817","modified":1544613428051},{"_id":"public/img/mentorship.svg","hash":"4d65cdd9dcd1746a720cf2780520d03742dcb08d","modified":1544613428051},{"_id":"public/img/logo-youtube.svg","hash":"3ae5d09fa03adc4e8fdbef19db2d1aa11fe95cd4","modified":1544613428050},{"_id":"public/img/product_design.svg","hash":"0d8816bac119f96fb16a0a998251746c73b3deb7","modified":1544613428051},{"_id":"public/img/status_logo.svg","hash":"98b9dabe54674dc55d03196bcb2650be8af5441c","modified":1544613428051},{"_id":"public/img/technical_support.svg","hash":"0e334805845d145abcdcced17d677dd2f153cfca","modified":1544613428051},{"_id":"public/js/vendor.js.map","hash":"3bdb57f6252e6e6025e4c9fee89dc385bdb4c5d2","modified":1544613428051},{"_id":"public/scss/archive.scss","hash":"ede7e53a832bf717ebd71b5c986be22d0a3185dd","modified":1544613428051},{"_id":"public/scss/base.scss","hash":"7685e0948b092ac2308b2e842e944aa450e177bd","modified":1544613428051},{"_id":"public/scss/fonts.scss","hash":"bf5c7f0d6789b2ce1a45cbcd9a1bb5e5b17d5b0e","modified":1544613428051},{"_id":"public/scss/colors.scss","hash":"a9e24cea9b3b37a32dfce9c80dc27f970b9a38ff","modified":1544613428051},{"_id":"public/scss/footer.scss","hash":"89ef743275dcb564ca1cfe18404b3b1f7c5e375f","modified":1544613428051},{"_id":"public/scss/formReset.scss","hash":"bf4b9f20523fc5907dfb438f6fac20201bb626cf","modified":1544613428051},{"_id":"public/scss/header.scss","hash":"3921b1418b6d640a41dcfa72089d5ce316e32a1e","modified":1544613428052},{"_id":"public/scss/highlight.scss","hash":"12e0566bea22131ec402193ef9e6942f3e2ca40b","modified":1544613428051},{"_id":"public/scss/index.scss","hash":"7fff944e00ed147f1790b83be1c7647ca0dc14ae","modified":1544613428052},{"_id":"public/scss/main.scss","hash":"80fc4723dea991b40fdf62959d8e84b50db032b2","modified":1544613428052},{"_id":"public/scss/page.scss","hash":"c4ecdec36bf933ba7849e9d7fecfa1ca719dbb87","modified":1544613428052},{"_id":"public/scss/popup.scss","hash":"5830b5d3679d51a32653a2a4d8b1155b32bb13a5","modified":1544613428052},{"_id":"public/scss/sidebar.scss","hash":"c51af117e47dd302edf188f43629cb6036797095","modified":1544613428052},{"_id":"public/fonts/RobotoRegular/RobotoRegular.eot","hash":"f045fe2f6ec39d5d794e31e9ab621fdd230c0696","modified":1544613428053},{"_id":"public/fonts/RobotoRegular/RobotoRegular.ttf","hash":"af03242b7545da3e54913906aaadce6a55c5f3bd","modified":1544613428052},{"_id":"public/fonts/RobotoRegular/RobotoRegular.woff","hash":"c729757be40622e32a3cdee9e9ad4eabf80d38bc","modified":1544613428053},{"_id":"public/js/styles/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1544613428053},{"_id":"public/js/styles/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1544613428053},{"_id":"public/js/styles/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1544613428053},{"_id":"public/fonts/PostGrotesk-Book.woff","hash":"d65f746630c83d89cd5da6e08f4cbb7b522a1176","modified":1544613428047},{"_id":"public/fonts/PostGrotesk-Book.ttf","hash":"3a85fb6216d4cc0fc888da2b919a8b1effee12de","modified":1544613428066},{"_id":"public/fonts/PostGrotesk-Medium.ttf","hash":"2795ef51769efc5b85e8170a6423dfe71e31341c","modified":1544613428090},{"_id":"public/fonts/PostGrotesk-Medium.woff","hash":"5e5549a6b44673303caf45984a7a6b4f00bcf0d3","modified":1544613428069},{"_id":"public/js/vendor.js","hash":"788f005abc61d3e9f0f91cadb981664e87d37fe5","modified":1544613428083},{"_id":"public/js/main.js","hash":"33222c9e6cccc6923fbf502ed11ea5eaa232f6f1","modified":1544613428083},{"_id":"public/js/styles/androidstudio.css","hash":"958baa24814c06a625612a3b2b478d54bc1bf1b1","modified":1544613428083},{"_id":"public/js/styles/agate.css","hash":"8e122b0f00f5a7ec4e6dc492bf1560441eeef7f0","modified":1544613428083},{"_id":"public/js/styles/arta.css","hash":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584","modified":1544613428083},{"_id":"public/js/styles/arduino-light.css","hash":"c6e05580b51b755e229e99eb156940ad2cab192b","modified":1544613428083},{"_id":"public/js/styles/atelier-cave-dark.css","hash":"f397d4418ce88b998841fd9135242461ba1a79b5","modified":1544613428083},{"_id":"public/js/styles/ascetic.css","hash":"6358377b5c25667886aca0d605cbc497cf02405f","modified":1544613428083},{"_id":"public/js/styles/atelier-dune-light.css","hash":"7ba074de897e6a5e27d8b97f7cd06c1746474e72","modified":1544613428083},{"_id":"public/js/styles/atelier-dune-dark.css","hash":"081d73e454db140cd41b2bb595be297cfcab25e0","modified":1544613428084},{"_id":"public/js/styles/atelier-cave-light.css","hash":"2933f0247ac6d84c2954dd4946e359853abbf70a","modified":1544613428083},{"_id":"public/js/styles/atelier-estuary-light.css","hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1544613428084},{"_id":"public/js/styles/atelier-heath-dark.css","hash":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78","modified":1544613428084},{"_id":"public/js/styles/atelier-estuary-dark.css","hash":"a0c46a0f955e3864f5e967ea93f5e61519a17be8","modified":1544613428084},{"_id":"public/js/styles/atelier-forest-light.css","hash":"8a78a4eea0f32d094d1f9e316d59e990ba739d97","modified":1544613428084},{"_id":"public/js/styles/atelier-forest-dark.css","hash":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101","modified":1544613428084},{"_id":"public/js/styles/atelier-heath-light.css","hash":"172b98f783d213a20211ec6aca9a3840ba524f55","modified":1544613428084},{"_id":"public/js/styles/atelier-lakeside-dark.css","hash":"fa707b252d5d5caccc0589374522bed47b7ca100","modified":1544613428084},{"_id":"public/js/styles/atelier-lakeside-light.css","hash":"8ba595b9ba6e8be6dc029bf80caab38e85aed686","modified":1544613428084},{"_id":"public/js/styles/atelier-plateau-dark.css","hash":"240f79f4e1fd63485c13900875b64c5a0d1bd06d","modified":1544613428084},{"_id":"public/js/styles/atelier-plateau-light.css","hash":"9731db1052f23351c983210701edd3f5ceed343f","modified":1544613428084},{"_id":"public/js/styles/atelier-savanna-dark.css","hash":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a","modified":1544613428084},{"_id":"public/js/styles/atelier-savanna-light.css","hash":"6bd3a62c32558476d436bd389500e5fbeb693d67","modified":1544613428085},{"_id":"public/js/styles/atelier-seaside-dark.css","hash":"b2800804a21f729a3d0a16b3aadc17679fd0639c","modified":1544613428084},{"_id":"public/js/styles/atelier-seaside-light.css","hash":"3e6b9e2a3a5de455490b8224401f19702df4cde9","modified":1544613428085},{"_id":"public/js/styles/atelier-sulphurpool-dark.css","hash":"1f006f8bd28e2ffbb73f708769605ba766787fff","modified":1544613428085},{"_id":"public/js/styles/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1544613428085},{"_id":"public/js/styles/atelier-sulphurpool-light.css","hash":"0319c3eea893601b79b6c57652ef49b9222cc9de","modified":1544613428085},{"_id":"public/js/styles/atom-one-light.css","hash":"eda63d8cce440dbf3bb823e10577a134e9941deb","modified":1544613428085},{"_id":"public/js/styles/brown-paper.css","hash":"a6817d890e58f80ce79d87620791dae821a70fff","modified":1544613428085},{"_id":"public/js/styles/codepen-embed.css","hash":"c4520e45d18259817b8942d17971f27c94f0fb09","modified":1544613428085},{"_id":"public/js/styles/color-brewer.css","hash":"96332573db854e7b7411caa94ba29b238fede2d3","modified":1544613428085},{"_id":"public/js/styles/darcula.css","hash":"7740224d07375ddc321147dffabbfa83e39f0d8b","modified":1544613428085},{"_id":"public/js/styles/docco.css","hash":"1be7be09a1b927c22c7f11451becdb335145bdd2","modified":1544613428085},{"_id":"public/js/styles/dark.css","hash":"fc77519d4f5d731054c5d4b7e7bbdbb510833271","modified":1544613428085},{"_id":"public/js/styles/default.css","hash":"fba68624d1b34a5543fe0bf4b2af2ac1ddf65e74","modified":1544613428085},{"_id":"public/js/styles/darkula.css","hash":"0be948bb84acc05f93a1e5e9b48fe34cf61673a0","modified":1544613428085},{"_id":"public/js/styles/far.css","hash":"67e0658b2376e91e4894636a3522a30c2aec42de","modified":1544613428085},{"_id":"public/js/styles/dracula.css","hash":"2633f2e84680e9f381e9ac1df344b542e28f9774","modified":1544613428085},{"_id":"public/js/styles/foundation.css","hash":"75b0674dd1ed35d61977bd5c35dc29ca35835a7b","modified":1544613428086},{"_id":"public/js/styles/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1544613428086},{"_id":"public/js/styles/github-gist.css","hash":"77cf684fda415812d6279a52f299c84850244778","modified":1544613428086},{"_id":"public/js/styles/googlecode.css","hash":"fed3d439d0c305b337dd9c0f68dcbfa51429f445","modified":1544613428086},{"_id":"public/js/styles/grayscale.css","hash":"5688658c28fc5799517e8f3c224ae3da3797ba44","modified":1544613428086},{"_id":"public/js/styles/gruvbox-dark.css","hash":"aaf90d076e34bc44016462d70f83985e0e55c8dc","modified":1544613428086},{"_id":"public/js/styles/gruvbox-light.css","hash":"084699ab0aa326fede86e38bf41ebe49edde3a90","modified":1544613428086},{"_id":"public/js/styles/hybrid.css","hash":"1e2d54598b5f948b597059909d4bd158b7df021f","modified":1544613428086},{"_id":"public/js/styles/hopscotch.css","hash":"03e7b9ec74bbd375db8d476836aac3729a6c86e8","modified":1544613428086},{"_id":"public/js/styles/idea.css","hash":"164649ae1e7c891a0d88cca075521af28656e2a1","modified":1544613428086},{"_id":"public/js/styles/ir-black.css","hash":"95aad65ba77183500ce0f7ad62a7535b647ee20c","modified":1544613428086},{"_id":"public/js/styles/kimbie.dark.css","hash":"58ed061c204fbc09d221ee9135d66bad976e5fc3","modified":1544613428087},{"_id":"public/js/styles/magula.css","hash":"ebc291f90e456abeeccb16937e7f51735733f4f7","modified":1544613428087},{"_id":"public/js/styles/kimbie.light.css","hash":"b7aa9b1b21a25dfefcac7649a328962f84c47913","modified":1544613428087},{"_id":"public/js/styles/mono-blue.css","hash":"fd0f39cd4c93ccb8d0bb2f6a1f359522e15a89cb","modified":1544613428087},{"_id":"public/js/styles/monokai-sublime.css","hash":"e4f3df87cbfa634c86b489e9cc43acf44d415986","modified":1544613428087},{"_id":"public/js/styles/obsidian.css","hash":"6ed475813fe4886a58b236297862ff2f181e66f7","modified":1544613428087},{"_id":"public/js/styles/monokai.css","hash":"f69df92e3ccdce28e6f811ec84f11698f2811198","modified":1544613428087},{"_id":"public/js/styles/ocean.css","hash":"fce6858e1c5eb9d2857cb5b5d24069c5994cfc91","modified":1544613428087},{"_id":"public/js/styles/paraiso-dark.css","hash":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341","modified":1544613428087},{"_id":"public/js/styles/paraiso-light.css","hash":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8","modified":1544613428088},{"_id":"public/js/styles/pojoaque.css","hash":"4e1e6a431212f5043a550474a1acda63362cdd6f","modified":1544613428088},{"_id":"public/js/styles/purebasic.css","hash":"f353a2cedf3f261a0676fce7c824bdd2e8197775","modified":1544613428088},{"_id":"public/js/styles/qtcreator_dark.css","hash":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba","modified":1544613428088},{"_id":"public/js/styles/qtcreator_light.css","hash":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878","modified":1544613428088},{"_id":"public/js/styles/railscasts.css","hash":"a6d2043478fae5915926914cbd96fe9b706d98a6","modified":1544613428088},{"_id":"public/js/styles/routeros.css","hash":"fc5db7c8f18d6b31ad92df21a51e7867d459af19","modified":1544613428088},{"_id":"public/js/styles/rainbow.css","hash":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e","modified":1544613428088},{"_id":"public/js/styles/school-book.css","hash":"60fe3d8063b1acc4d52de02033095adb0a2b35a9","modified":1544613428088},{"_id":"public/js/styles/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1544613428088},{"_id":"public/js/styles/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1544613428088},{"_id":"public/js/styles/sunburst.css","hash":"8309eab2e5b1765dbee81a626baacbdad869b76a","modified":1544613428088},{"_id":"public/js/styles/tomorrow-night-bright.css","hash":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89","modified":1544613428089},{"_id":"public/js/styles/tomorrow-night-blue.css","hash":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f","modified":1544613428089},{"_id":"public/js/styles/tomorrow-night.css","hash":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16","modified":1544613428088},{"_id":"public/js/styles/tomorrow-night-eighties.css","hash":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061","modified":1544613428089},{"_id":"public/js/styles/vs.css","hash":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa","modified":1544613428089},{"_id":"public/js/styles/tomorrow.css","hash":"163593ad70770d0296c5e643fa62e58e63f1b340","modified":1544613428089},{"_id":"public/js/styles/vs2015.css","hash":"3c7fa677de2a785d90fc6c3f7520ac1b11bfd37a","modified":1544613428089},{"_id":"public/js/styles/xcode.css","hash":"65d775a7e11e238c91e0d3c7370547348c92d6b3","modified":1544613428089},{"_id":"public/js/styles/zenburn.css","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1544613428090},{"_id":"public/js/styles/xt256.css","hash":"bbe28ec69177699cb6300d777598adf6323f7861","modified":1544613428089},{"_id":"public/fonts/Inter-UI-Bold.woff2","hash":"51e75c772ad5bb111cf98d4ceb349cfdaf709252","modified":1544613428090},{"_id":"public/fonts/PostGrotesk-Medium.eot","hash":"f20a35250d91f6f46e477eda052171180c06a265","modified":1544613428091},{"_id":"public/fonts/Inter-UI-Medium.woff2","hash":"fc61451b9c27e2df7cad509d103a705a32ffc453","modified":1544613428121},{"_id":"public/fonts/Inter-UI-BoldItalic.woff2","hash":"cfded946f4f1f1b25c57f76f9bd291fa1af02feb","modified":1544613428121},{"_id":"public/fonts/Inter-UI-Italic.woff2","hash":"bc95f46cc6172ab234234688a44b2372688d9b40","modified":1544613428101},{"_id":"public/fonts/Inter-UI-MediumItalic.woff2","hash":"6e03a165a849a462536ae429e7d8ee47f5e0b557","modified":1544613428110},{"_id":"public/fonts/Inter-UI-Regular.woff2","hash":"96f5364d43c588110e3a3ab447d9b377eed80409","modified":1544613428090},{"_id":"public/fonts/PostGrotesk-Book.eot","hash":"264f4f9745237ca98b3cd796bf2d3a21b232e6c5","modified":1544613428090},{"_id":"public/fonts/Inter-UI-Medium.woff","hash":"5e8f0fed42fcf3712aee462932fdc42f7f2a5e55","modified":1544613428111},{"_id":"public/fonts/Inter-UI-MediumItalic.woff","hash":"34a733edd673806091ae1b37e8692099b63c59e5","modified":1544613428111},{"_id":"public/fonts/Inter-UI-Regular.woff","hash":"4b8534f53317657526b9d0fa620f80754b4d0c99","modified":1544613428110},{"_id":"public/fonts/Inter-UI-Bold.woff","hash":"bce41a7fe8e352983cfbcebaa6e93dff9623c2e5","modified":1544613428171},{"_id":"public/fonts/Inter-UI-Italic.woff","hash":"92dd7479c19e382e450ab5c22e3d20df5321100e","modified":1544613428121},{"_id":"public/fonts/PostGrotesk-Medium.svg","hash":"e911d4b378f3d51de05c484262caca8f03872cbf","modified":1544613428122},{"_id":"public/fonts/PostGrotesk-Book.svg","hash":"ba365bd7c5413c3c5426efb31aa6ab8ce0e56633","modified":1544613428122},{"_id":"public/fonts/Inter-UI-BoldItalic.woff","hash":"9416a3cfc5ea0ec650e9065162f78db92b270ac6","modified":1544613428111},{"_id":"source/api/apdu.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544772050286},{"_id":"source/api/java-sdk.md","hash":"8fd260a0535be0c62ee1dc4e12b4bd170171f9ce","modified":1547713746580},{"_id":"public/api/apdu.html","hash":"f2f9f355eeaabc474e77674769246aa7e3b908e0","modified":1547628239389},{"_id":"public/api/java-sdk.html","hash":"9ddae47e2564e513011f562c9c7218fdd24ed5d8","modified":1547714080131}],"Category":[],"Data":[{"_id":"menu","data":{"docs":"/docs/","blog":"https://our.status.im/incubate"}},{"_id":"languages","data":{"en":"English"}},{"_id":"sidebar","data":{"api":{"API":{"overview":"index.html"},"Tutorials":{"learn_more":"../tutorials/"}},"tutorials":{"start":{"start_here":"index.html"},"by_lanaguge":{"go":"go_tutorial.html"},"Api":{"back_to_api":"../api/"}}}}],"Page":[{"title":"Status","layout":"index","_content":"","source":"index.md","raw":"title: Status\nlayout: index\n---\n","date":"2018-12-12T10:19:20.150Z","updated":"2018-12-12T10:19:20.150Z","path":"index.html","comments":1,"_id":"cjpl2x2yl0000gkqedewg803l","content":"","site":{"data":{"menu":{"docs":"/docs/","blog":"https://our.status.im/incubate"},"languages":{"en":"English"},"sidebar":{"api":{"API":{"overview":"index.html"},"Tutorials":{"learn_more":"../tutorials/"}},"tutorials":{"start":{"start_here":"index.html"},"by_lanaguge":{"go":"go_tutorial.html"},"Api":{"back_to_api":"../api/"}}}}},"excerpt":"","more":""},{"id":"index","title":"Keycard API","_content":"\n# Getting started\n\nKeycard provides to developer an hardware implementation of a [BIP-32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) HD wallet. This means it supports key generation,\nderivation and signing. It also allows exporting keys defined in the context of [EIP-1581](https://eips.ethereum.org/EIPS/eip-1581).\n\nCommunication with the Keycard happens through a simple APDU interface is provided, together with a Secure Channel \nguaranteeing confidentiality, authentication and integrity of all commands. It supports both NFC and ISO7816 physical\ninterfaces, meaning that it is compatible with any Android phone equipped with NFC and all USB Smartcard readers.\n\nThe most obvious case for integration of Keycard is crypto wallets (ETH, BTC, etc), however it can be used in other\nsystems where a BIP-32 key tree is used and/or you perform authentication/identification.\n\nTo further simplify integration, we have developed a Java-based API which can be used on both desktop and Android systems.\nOn the desktop it uses the javax.smartcardio to interface with the card, which is compatible with most USB readers. On\nAndroid it uses the on-board NFC reader. If you develop in Java or any other language available, this is the easiest way\nto use the Keycard. [Read the documentation by clicking here](java-sdk.html)\n\nIf you use a different language, please first refer to the [Java SDK](java-sdk.html) documentation for a high level overview\nof how to perform different tasks with the Keycard. Then, please check the [APDU protocol documentation](apdu.html) out\nfor the low-level details.","source":"api/index.md","raw":"---\nid: index\ntitle: Keycard API\n---\n\n# Getting started\n\nKeycard provides to developer an hardware implementation of a [BIP-32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) HD wallet. This means it supports key generation,\nderivation and signing. It also allows exporting keys defined in the context of [EIP-1581](https://eips.ethereum.org/EIPS/eip-1581).\n\nCommunication with the Keycard happens through a simple APDU interface is provided, together with a Secure Channel \nguaranteeing confidentiality, authentication and integrity of all commands. It supports both NFC and ISO7816 physical\ninterfaces, meaning that it is compatible with any Android phone equipped with NFC and all USB Smartcard readers.\n\nThe most obvious case for integration of Keycard is crypto wallets (ETH, BTC, etc), however it can be used in other\nsystems where a BIP-32 key tree is used and/or you perform authentication/identification.\n\nTo further simplify integration, we have developed a Java-based API which can be used on both desktop and Android systems.\nOn the desktop it uses the javax.smartcardio to interface with the card, which is compatible with most USB readers. On\nAndroid it uses the on-board NFC reader. If you develop in Java or any other language available, this is the easiest way\nto use the Keycard. [Read the documentation by clicking here](java-sdk.html)\n\nIf you use a different language, please first refer to the [Java SDK](java-sdk.html) documentation for a high level overview\nof how to perform different tasks with the Keycard. Then, please check the [APDU protocol documentation](apdu.html) out\nfor the low-level details.","date":"2019-01-16T08:50:54.491Z","updated":"2019-01-16T08:50:54.486Z","path":"api/index.html","_id":"cjpl2x2zl0002gkqep1nfz2tm","comments":1,"layout":"page","content":"<h1 id=\"Getting-started\"><a href=\"#Getting-started\" class=\"headerlink\" title=\"Getting started\"></a>Getting started</h1><p>Keycard provides to developer an hardware implementation of a <a href=\"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\" target=\"_blank\" rel=\"noopener\">BIP-32</a> HD wallet. This means it supports key generation,<br>derivation and signing. It also allows exporting keys defined in the context of <a href=\"https://eips.ethereum.org/EIPS/eip-1581\" target=\"_blank\" rel=\"noopener\">EIP-1581</a>.</p>\n<p>Communication with the Keycard happens through a simple APDU interface is provided, together with a Secure Channel<br>guaranteeing confidentiality, authentication and integrity of all commands. It supports both NFC and ISO7816 physical<br>interfaces, meaning that it is compatible with any Android phone equipped with NFC and all USB Smartcard readers.</p>\n<p>The most obvious case for integration of Keycard is crypto wallets (ETH, BTC, etc), however it can be used in other<br>systems where a BIP-32 key tree is used and/or you perform authentication/identification.</p>\n<p>To further simplify integration, we have developed a Java-based API which can be used on both desktop and Android systems.<br>On the desktop it uses the javax.smartcardio to interface with the card, which is compatible with most USB readers. On<br>Android it uses the on-board NFC reader. If you develop in Java or any other language available, this is the easiest way<br>to use the Keycard. <a href=\"java-sdk.html\">Read the documentation by clicking here</a></p>\n<p>If you use a different language, please first refer to the <a href=\"java-sdk.html\">Java SDK</a> documentation for a high level overview<br>of how to perform different tasks with the Keycard. Then, please check the <a href=\"apdu.html\">APDU protocol documentation</a> out<br>for the low-level details.</p>\n","site":{"data":{"menu":{"docs":"/docs/","blog":"https://our.status.im/incubate"},"languages":{"en":"English"},"sidebar":{"api":{"API":{"overview":"index.html"},"Tutorials":{"learn_more":"../tutorials/"}},"tutorials":{"start":{"start_here":"index.html"},"by_lanaguge":{"go":"go_tutorial.html"},"Api":{"back_to_api":"../api/"}}}}},"excerpt":"","more":"<h1 id=\"Getting-started\"><a href=\"#Getting-started\" class=\"headerlink\" title=\"Getting started\"></a>Getting started</h1><p>Keycard provides to developer an hardware implementation of a <a href=\"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\" target=\"_blank\" rel=\"noopener\">BIP-32</a> HD wallet. This means it supports key generation,<br>derivation and signing. It also allows exporting keys defined in the context of <a href=\"https://eips.ethereum.org/EIPS/eip-1581\" target=\"_blank\" rel=\"noopener\">EIP-1581</a>.</p>\n<p>Communication with the Keycard happens through a simple APDU interface is provided, together with a Secure Channel<br>guaranteeing confidentiality, authentication and integrity of all commands. It supports both NFC and ISO7816 physical<br>interfaces, meaning that it is compatible with any Android phone equipped with NFC and all USB Smartcard readers.</p>\n<p>The most obvious case for integration of Keycard is crypto wallets (ETH, BTC, etc), however it can be used in other<br>systems where a BIP-32 key tree is used and/or you perform authentication/identification.</p>\n<p>To further simplify integration, we have developed a Java-based API which can be used on both desktop and Android systems.<br>On the desktop it uses the javax.smartcardio to interface with the card, which is compatible with most USB readers. On<br>Android it uses the on-board NFC reader. If you develop in Java or any other language available, this is the easiest way<br>to use the Keycard. <a href=\"java-sdk.html\">Read the documentation by clicking here</a></p>\n<p>If you use a different language, please first refer to the <a href=\"java-sdk.html\">Java SDK</a> documentation for a high level overview<br>of how to perform different tasks with the Keycard. Then, please check the <a href=\"apdu.html\">APDU protocol documentation</a> out<br>for the low-level details.</p>\n"},{"id":"go_tutorial","title":"Work with Keycard in Golang","_content":"\n# Get Setup to Work in Golang","source":"tutorials/go_tutorial.md","raw":"---\nid: go_tutorial\ntitle: Work with Keycard in Golang\n---\n\n# Get Setup to Work in Golang","date":"2018-12-12T10:19:20.150Z","updated":"2018-12-12T10:19:20.150Z","path":"tutorials/go_tutorial.html","comments":1,"layout":"page","_id":"cjpl2x2zn0003gkqept18coux","content":"<h1 id=\"Get-Setup-to-Work-in-Golang\"><a href=\"#Get-Setup-to-Work-in-Golang\" class=\"headerlink\" title=\"Get Setup to Work in Golang\"></a>Get Setup to Work in Golang</h1>","site":{"data":{"menu":{"docs":"/docs/","blog":"https://our.status.im/incubate"},"languages":{"en":"English"},"sidebar":{"api":{"API":{"overview":"index.html"},"Tutorials":{"learn_more":"../tutorials/"}},"tutorials":{"start":{"start_here":"index.html"},"by_lanaguge":{"go":"go_tutorial.html"},"Api":{"back_to_api":"../api/"}}}}},"excerpt":"","more":"<h1 id=\"Get-Setup-to-Work-in-Golang\"><a href=\"#Get-Setup-to-Work-in-Golang\" class=\"headerlink\" title=\"Get Setup to Work in Golang\"></a>Get Setup to Work in Golang</h1>"},{"id":"index","title":"Learn How To Use Keycard","_content":"\n# Start Integrating Keycard Now\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam lobortis neque eu libero molestie iaculis. Aenean a risus vel magna faucibus molestie. Vestibulum quam eros, pretium ut mattis in, hendrerit non metus. Duis auctor neque vitae tincidunt facilisis. Nullam vel dolor justo. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla malesuada elit non pharetra sodales. Aenean mollis metus est, vel rutrum neque laoreet eget. Pellentesque fringilla est nec magna accumsan facilisis. Sed non lectus orci. Praesent varius sem in pretium condimentum. Etiam pellentesque mauris at congue finibus. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n\nAliquam urna urna, efficitur eget lacus vitae, porta hendrerit sem. Nullam rhoncus pulvinar orci, ullamcorper molestie metus consectetur non. Vivamus tempus sem id nunc imperdiet, in varius justo ullamcorper. Proin tincidunt augue odio, vel consequat quam vehicula eu. Fusce pharetra pretium sagittis. Pellentesque vel massa vel odio pellentesque luctus. Sed tempus libero sed sapien commodo aliquet. Sed tempus massa tempus, ultricies tortor ac, efficitur odio.\n\nMaecenas malesuada magna eget ipsum placerat tincidunt. Donec ac nulla interdum, accumsan mi at, varius est. Sed viverra mi vitae mauris consequat, ut cursus metus ultrices. Phasellus ornare pharetra eros, auctor blandit nisi lacinia sit amet. Vivamus rhoncus augue id cursus lacinia. Nulla placerat neque risus, maximus interdum sapien placerat non. Sed a est eu dui viverra finibus. Curabitur cursus vitae nisi a accumsan. Integer leo massa, dictum at leo vel, euismod sollicitudin tellus. Vivamus eleifend lobortis porta. Suspendisse tincidunt augue in diam eleifend commodo.\n\nNulla sapien velit, posuere ut tempus eget, tincidunt sed elit. Nam maximus arcu ut luctus gravida. Sed varius justo et purus faucibus interdum sed vitae lectus. Aliquam in aliquam justo. Aliquam id felis tincidunt, maximus erat sit amet, tincidunt ante. Praesent non aliquet purus. Morbi porta ullamcorper sem eget dapibus. Maecenas faucibus quam eu mi bibendum consequat. Vestibulum venenatis molestie erat, vel eleifend nibh mattis id. Aenean vitae tincidunt nulla. Suspendisse vel commodo sem, vel blandit risus. Donec dignissim blandit est eu tincidunt.\n\nAliquam mauris tortor, ultrices non posuere a, semper et elit. Suspendisse eget magna nisl. Mauris ac nisi et mi ullamcorper facilisis id quis lorem. Fusce non lacus tempor, tempus magna a, tempus purus. Donec malesuada interdum lorem in vestibulum. Sed convallis, mauris vitae condimentum volutpat, eros ipsum rutrum risus, vitae placerat diam dolor condimentum metus. Aliquam augue mauris, ullamcorper at quam sed, blandit elementum risus. Suspendisse nec enim sed lacus dictum finibus vitae non tellus. Pellentesque rutrum, purus at bibendum venenatis, justo ligula porta ante, nec imperdiet erat felis quis mauris. Aliquam vel dolor nisl. Proin quis nibh sodales tortor elementum pellentesque. Cras maximus gravida erat, vitae pharetra justo facilisis vel. Proin mauris mauris, vestibulum at dapibus vitae, condimentum dapibus lacus. Aliquam erat volutpat. Proin tortor est, finibus sit amet nunc eget, fermentum molestie lacus. Duis arcu augue, condimentum non libero id, bibendum pharetra mauris.","source":"tutorials/index.md","raw":"---\nid: index\ntitle: Learn How To Use Keycard\n---\n\n# Start Integrating Keycard Now\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam lobortis neque eu libero molestie iaculis. Aenean a risus vel magna faucibus molestie. Vestibulum quam eros, pretium ut mattis in, hendrerit non metus. Duis auctor neque vitae tincidunt facilisis. Nullam vel dolor justo. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla malesuada elit non pharetra sodales. Aenean mollis metus est, vel rutrum neque laoreet eget. Pellentesque fringilla est nec magna accumsan facilisis. Sed non lectus orci. Praesent varius sem in pretium condimentum. Etiam pellentesque mauris at congue finibus. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n\nAliquam urna urna, efficitur eget lacus vitae, porta hendrerit sem. Nullam rhoncus pulvinar orci, ullamcorper molestie metus consectetur non. Vivamus tempus sem id nunc imperdiet, in varius justo ullamcorper. Proin tincidunt augue odio, vel consequat quam vehicula eu. Fusce pharetra pretium sagittis. Pellentesque vel massa vel odio pellentesque luctus. Sed tempus libero sed sapien commodo aliquet. Sed tempus massa tempus, ultricies tortor ac, efficitur odio.\n\nMaecenas malesuada magna eget ipsum placerat tincidunt. Donec ac nulla interdum, accumsan mi at, varius est. Sed viverra mi vitae mauris consequat, ut cursus metus ultrices. Phasellus ornare pharetra eros, auctor blandit nisi lacinia sit amet. Vivamus rhoncus augue id cursus lacinia. Nulla placerat neque risus, maximus interdum sapien placerat non. Sed a est eu dui viverra finibus. Curabitur cursus vitae nisi a accumsan. Integer leo massa, dictum at leo vel, euismod sollicitudin tellus. Vivamus eleifend lobortis porta. Suspendisse tincidunt augue in diam eleifend commodo.\n\nNulla sapien velit, posuere ut tempus eget, tincidunt sed elit. Nam maximus arcu ut luctus gravida. Sed varius justo et purus faucibus interdum sed vitae lectus. Aliquam in aliquam justo. Aliquam id felis tincidunt, maximus erat sit amet, tincidunt ante. Praesent non aliquet purus. Morbi porta ullamcorper sem eget dapibus. Maecenas faucibus quam eu mi bibendum consequat. Vestibulum venenatis molestie erat, vel eleifend nibh mattis id. Aenean vitae tincidunt nulla. Suspendisse vel commodo sem, vel blandit risus. Donec dignissim blandit est eu tincidunt.\n\nAliquam mauris tortor, ultrices non posuere a, semper et elit. Suspendisse eget magna nisl. Mauris ac nisi et mi ullamcorper facilisis id quis lorem. Fusce non lacus tempor, tempus magna a, tempus purus. Donec malesuada interdum lorem in vestibulum. Sed convallis, mauris vitae condimentum volutpat, eros ipsum rutrum risus, vitae placerat diam dolor condimentum metus. Aliquam augue mauris, ullamcorper at quam sed, blandit elementum risus. Suspendisse nec enim sed lacus dictum finibus vitae non tellus. Pellentesque rutrum, purus at bibendum venenatis, justo ligula porta ante, nec imperdiet erat felis quis mauris. Aliquam vel dolor nisl. Proin quis nibh sodales tortor elementum pellentesque. Cras maximus gravida erat, vitae pharetra justo facilisis vel. Proin mauris mauris, vestibulum at dapibus vitae, condimentum dapibus lacus. Aliquam erat volutpat. Proin tortor est, finibus sit amet nunc eget, fermentum molestie lacus. Duis arcu augue, condimentum non libero id, bibendum pharetra mauris.","date":"2018-12-12T10:19:20.151Z","updated":"2018-12-12T10:19:20.151Z","path":"tutorials/index.html","comments":1,"layout":"page","_id":"cjpl2x2zo0004gkqerz3v6n69","content":"<h1 id=\"Start-Integrating-Keycard-Now\"><a href=\"#Start-Integrating-Keycard-Now\" class=\"headerlink\" title=\"Start Integrating Keycard Now\"></a>Start Integrating Keycard Now</h1><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam lobortis neque eu libero molestie iaculis. Aenean a risus vel magna faucibus molestie. Vestibulum quam eros, pretium ut mattis in, hendrerit non metus. Duis auctor neque vitae tincidunt facilisis. Nullam vel dolor justo. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla malesuada elit non pharetra sodales. Aenean mollis metus est, vel rutrum neque laoreet eget. Pellentesque fringilla est nec magna accumsan facilisis. Sed non lectus orci. Praesent varius sem in pretium condimentum. Etiam pellentesque mauris at congue finibus. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n<p>Aliquam urna urna, efficitur eget lacus vitae, porta hendrerit sem. Nullam rhoncus pulvinar orci, ullamcorper molestie metus consectetur non. Vivamus tempus sem id nunc imperdiet, in varius justo ullamcorper. Proin tincidunt augue odio, vel consequat quam vehicula eu. Fusce pharetra pretium sagittis. Pellentesque vel massa vel odio pellentesque luctus. Sed tempus libero sed sapien commodo aliquet. Sed tempus massa tempus, ultricies tortor ac, efficitur odio.</p>\n<p>Maecenas malesuada magna eget ipsum placerat tincidunt. Donec ac nulla interdum, accumsan mi at, varius est. Sed viverra mi vitae mauris consequat, ut cursus metus ultrices. Phasellus ornare pharetra eros, auctor blandit nisi lacinia sit amet. Vivamus rhoncus augue id cursus lacinia. Nulla placerat neque risus, maximus interdum sapien placerat non. Sed a est eu dui viverra finibus. Curabitur cursus vitae nisi a accumsan. Integer leo massa, dictum at leo vel, euismod sollicitudin tellus. Vivamus eleifend lobortis porta. Suspendisse tincidunt augue in diam eleifend commodo.</p>\n<p>Nulla sapien velit, posuere ut tempus eget, tincidunt sed elit. Nam maximus arcu ut luctus gravida. Sed varius justo et purus faucibus interdum sed vitae lectus. Aliquam in aliquam justo. Aliquam id felis tincidunt, maximus erat sit amet, tincidunt ante. Praesent non aliquet purus. Morbi porta ullamcorper sem eget dapibus. Maecenas faucibus quam eu mi bibendum consequat. Vestibulum venenatis molestie erat, vel eleifend nibh mattis id. Aenean vitae tincidunt nulla. Suspendisse vel commodo sem, vel blandit risus. Donec dignissim blandit est eu tincidunt.</p>\n<p>Aliquam mauris tortor, ultrices non posuere a, semper et elit. Suspendisse eget magna nisl. Mauris ac nisi et mi ullamcorper facilisis id quis lorem. Fusce non lacus tempor, tempus magna a, tempus purus. Donec malesuada interdum lorem in vestibulum. Sed convallis, mauris vitae condimentum volutpat, eros ipsum rutrum risus, vitae placerat diam dolor condimentum metus. Aliquam augue mauris, ullamcorper at quam sed, blandit elementum risus. Suspendisse nec enim sed lacus dictum finibus vitae non tellus. Pellentesque rutrum, purus at bibendum venenatis, justo ligula porta ante, nec imperdiet erat felis quis mauris. Aliquam vel dolor nisl. Proin quis nibh sodales tortor elementum pellentesque. Cras maximus gravida erat, vitae pharetra justo facilisis vel. Proin mauris mauris, vestibulum at dapibus vitae, condimentum dapibus lacus. Aliquam erat volutpat. Proin tortor est, finibus sit amet nunc eget, fermentum molestie lacus. Duis arcu augue, condimentum non libero id, bibendum pharetra mauris.</p>\n","site":{"data":{"menu":{"docs":"/docs/","blog":"https://our.status.im/incubate"},"languages":{"en":"English"},"sidebar":{"api":{"API":{"overview":"index.html"},"Tutorials":{"learn_more":"../tutorials/"}},"tutorials":{"start":{"start_here":"index.html"},"by_lanaguge":{"go":"go_tutorial.html"},"Api":{"back_to_api":"../api/"}}}}},"excerpt":"","more":"<h1 id=\"Start-Integrating-Keycard-Now\"><a href=\"#Start-Integrating-Keycard-Now\" class=\"headerlink\" title=\"Start Integrating Keycard Now\"></a>Start Integrating Keycard Now</h1><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam lobortis neque eu libero molestie iaculis. Aenean a risus vel magna faucibus molestie. Vestibulum quam eros, pretium ut mattis in, hendrerit non metus. Duis auctor neque vitae tincidunt facilisis. Nullam vel dolor justo. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla malesuada elit non pharetra sodales. Aenean mollis metus est, vel rutrum neque laoreet eget. Pellentesque fringilla est nec magna accumsan facilisis. Sed non lectus orci. Praesent varius sem in pretium condimentum. Etiam pellentesque mauris at congue finibus. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n<p>Aliquam urna urna, efficitur eget lacus vitae, porta hendrerit sem. Nullam rhoncus pulvinar orci, ullamcorper molestie metus consectetur non. Vivamus tempus sem id nunc imperdiet, in varius justo ullamcorper. Proin tincidunt augue odio, vel consequat quam vehicula eu. Fusce pharetra pretium sagittis. Pellentesque vel massa vel odio pellentesque luctus. Sed tempus libero sed sapien commodo aliquet. Sed tempus massa tempus, ultricies tortor ac, efficitur odio.</p>\n<p>Maecenas malesuada magna eget ipsum placerat tincidunt. Donec ac nulla interdum, accumsan mi at, varius est. Sed viverra mi vitae mauris consequat, ut cursus metus ultrices. Phasellus ornare pharetra eros, auctor blandit nisi lacinia sit amet. Vivamus rhoncus augue id cursus lacinia. Nulla placerat neque risus, maximus interdum sapien placerat non. Sed a est eu dui viverra finibus. Curabitur cursus vitae nisi a accumsan. Integer leo massa, dictum at leo vel, euismod sollicitudin tellus. Vivamus eleifend lobortis porta. Suspendisse tincidunt augue in diam eleifend commodo.</p>\n<p>Nulla sapien velit, posuere ut tempus eget, tincidunt sed elit. Nam maximus arcu ut luctus gravida. Sed varius justo et purus faucibus interdum sed vitae lectus. Aliquam in aliquam justo. Aliquam id felis tincidunt, maximus erat sit amet, tincidunt ante. Praesent non aliquet purus. Morbi porta ullamcorper sem eget dapibus. Maecenas faucibus quam eu mi bibendum consequat. Vestibulum venenatis molestie erat, vel eleifend nibh mattis id. Aenean vitae tincidunt nulla. Suspendisse vel commodo sem, vel blandit risus. Donec dignissim blandit est eu tincidunt.</p>\n<p>Aliquam mauris tortor, ultrices non posuere a, semper et elit. Suspendisse eget magna nisl. Mauris ac nisi et mi ullamcorper facilisis id quis lorem. Fusce non lacus tempor, tempus magna a, tempus purus. Donec malesuada interdum lorem in vestibulum. Sed convallis, mauris vitae condimentum volutpat, eros ipsum rutrum risus, vitae placerat diam dolor condimentum metus. Aliquam augue mauris, ullamcorper at quam sed, blandit elementum risus. Suspendisse nec enim sed lacus dictum finibus vitae non tellus. Pellentesque rutrum, purus at bibendum venenatis, justo ligula porta ante, nec imperdiet erat felis quis mauris. Aliquam vel dolor nisl. Proin quis nibh sodales tortor elementum pellentesque. Cras maximus gravida erat, vitae pharetra justo facilisis vel. Proin mauris mauris, vestibulum at dapibus vitae, condimentum dapibus lacus. Aliquam erat volutpat. Proin tortor est, finibus sit amet nunc eget, fermentum molestie lacus. Duis arcu augue, condimentum non libero id, bibendum pharetra mauris.</p>\n"},{"_content":"","source":"api/apdu.md","raw":"","date":"2018-12-14T07:20:50.286Z","updated":"2018-12-14T07:20:50.286Z","path":"api/apdu.html","title":"","comments":1,"layout":"page","_id":"cjqyxw7i30000p0qe505dwpag","content":"","site":{"data":{"menu":{"docs":"/docs/","blog":"https://our.status.im/incubate"},"languages":{"en":"English"},"sidebar":{"api":{"API":{"overview":"index.html"},"Tutorials":{"learn_more":"../tutorials/"}},"tutorials":{"start":{"start_here":"index.html"},"by_lanaguge":{"go":"go_tutorial.html"},"Api":{"back_to_api":"../api/"}}}}},"excerpt":"","more":""},{"id":"java-sdk","title":"Keycard Java SDK","_content":"\n## Installation\n\nYou can import the SDK in your Gradle or Maven project using [Jitpack.io](https://jitpack.io). If using Gradle, to use\nJitPack all you have to do is insert these lines in you `build.gradle` file\n\n```groovy\nallprojects {\n  repositories {\n    maven { url 'https://jitpack.io' }\n  }\n}\n```\n\nThen, you must import the correct dependency. In case you are building an Android-based project, you need to add this line\n\n```groovy\ndependencies {\n  implementation 'com.github.status-im.status-keycard-java:android:2.0.0'\n}\n```\n\nIf you are working on the desktop, then you need this line instead\n\n```groovy\ndependencies {\n  implementation 'com.github.status-im.status-keycard-java:desktop:2.0.0'\n}\n```\n\nIn both case, you will have the same SDK, except for the way connection with the card is established.\n\n## Connecting to the card (Android)\n\nOn Android, the NFC connection handling must happen on a thread separate from the UI thread. The SDK provides the class `NFCCardManager` to handle this. This an example activity starting the NFC reader and handling the connection to the card. Refer to the comments in the example for more information.\n\n```java\npublic class MainActivity extends AppCompatActivity {\n  private NfcAdapter nfcAdapter;\n  private NFCCardManager cardManager;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    \n    // Get the Android NFC default adapter\n    nfcAdapter = NfcAdapter.getDefaultAdapter(this);\n    \n    // Create the NFCCardManager, this class is provided by the Keycard SDK and handles connections to the card\n    cardManager = new NFCCardManager();\n\n    // The Card Listener receives the connected/disconnected events. These can happen at any time since the user can\n    // introduce or remove the card to/from the field at any time. This is where your code goes.\n    cardManager.setCardListener(new CardListener() {\n      @Override\n      public void onConnected(CardChannel cardChannel) {\n        // Card is connected. Here you can start working with the Keycard. The CardChannel is what you will use to\n        // communicate with the card.\n      }\n\n      @Override\n      public void onDisconnected() {\n        // Card is disconnected (was removed from the field). You can perform cleanup here.\n      }\n    });\n    cardManager.start();\n  }\n\n  @Override\n  public void onResume() {\n    super.onResume();\n    \n    // We need to enable the reader on resume.\n    if (nfcAdapter != null) {\n      nfcAdapter.enableReaderMode(this, this.cardManager, NfcAdapter.FLAG_READER_NFC_A | NfcAdapter.FLAG_READER_SKIP_NDEF_CHECK, null);\n    }\n  }\n\n  @Override\n  public void onPause() {\n    super.onPause();\n    \n    // We disable the reader on pause to allow other apps to use it.\n    if (nfcAdapter != null) {\n      nfcAdapter.disableReaderMode(this);\n    }\n  }\n}\n```\n\n## Connecting to the card (Desktop)\n\nOn the desktop we use the javax.smartcardio library. There are several ways to handle connections, the important part is getting a CardChannel open. Below is an example of how this can be achieved (assumes that a single smartcard reader is connected).\n\n```java\n// We create a TerminalFactory object\nTerminalFactory tf = TerminalFactory.getDefault();\nCardTerminal cardTerminal;\n\n// We search a terminal with a card inside\nfor (CardTerminal t : tf.terminals().list()) {\nif (t.isCardPresent()) {\n  cardTerminal = t;\n  break;\n    }\n  }\n}\n\n// If not found, we throw an exception. Of course you should decide how to handle this situation\nif (cardTerminal == null) {\n  throw new RuntimeException(\"No terminal found\");\n}\n\n// If a terminal is found, we connect to it\nCard apduCard = cardTerminal.connect(\"*\");\n\n// We create a PCSCCardChannel, which is an implementation of CardChannel and can be used with the rest of the SDK.\nPCSCCardChannel apduChannel = new PCSCCardChannel(apduCard.getBasicChannel());\n```\n\n## Working with the card\n\nRegardless whether you are on Android or desktop, you should at this point have an implementation of the CardChannel interface (be it NFCCardChannel or PCSCCardChannel). You can now start working with the card. The first thing to do is creating a `KeycardCommandSet` instance. This class gives access to all of the applet functionality, wrapping the low-level APDUs in easy to use methods. All other classes in the SDK are helper to format parameters and parse responses from the card. To create a command set, just do\n\n```java\n// cardChannel is our CardChannel instance\nKeycardCommandSet cmdSet = new KeycardCommandSet(cardChannel);\n```\n\nModern SmartCards can have several applications installed, so after connection with the card you need to select the Keycard applet. This is easily done with\n\n```java\n// The checkOK method can be called on any APDUResponse object to confirm that the\ncmdSet.select().checkOK();\n```\n\nWhile this correctly selects the applet, it discards the card response, which contains information that can be useful to identify this specific card and its state. For this reason we could rewrite this as\n\n```java\nApplicationInfo info = new ApplicationInfo(cmdSet.select().checkOK().getData());\n\n// This method tells if the card is initialized (has a PIN, PUK and pairing password). If it is not, it must be\n// initialized and no other operation is possible. Note that initialization touches only credentials to authenticate\n// the user or the client, but does not touch the creation of a wallet on the card\ninfo.isInitializedCard();\n\n// Returns the instance UID of the applet. This can be used to identify this specific applet instance, very\n// useful when storing instance-specific data on the client (pairing info, cached data, etc).\ninfo.getInstanceUID();\n\n// Returns the version of the applet.\ninfo.getAppVersion();\n\n// Returns the number of free pairing slots. If you are not yet paired with the card, it helps you know if you can still\n// pair or not\ninfo.getFreePairingSlots());\n\n// Tells if the card has a wallet or not. If no wallet is available, you must create once before you can perform most\n// operations on the card\ninfo.hasMasterKey();\n\n// Returns the UID of the master key of the wallet. The UID is value generated starting from the public key and is \n// useful to identify if the card has the expected wallet.\ninfo.getKeyUID();\n```\n\nAfter the applet is selected, you can start working with it. Note that the application remains selected until another applet is explicitly selected, or the card is powered off (for example is removed from the field)\n\n### Initialization\n\nThis step is necessary to bring the initial credentials on the Keycard instance. When the card is not initialized, it cannot perform any operation. Initialization sets the initial PIN, PUK and pairing password and requires no authentication, but still uses a SecureChannel resistant to passive MITM attacks. Once the card is initialized, it cannot be initialized again (but credentials can be different with a different mechanism with previous authentication).\n\nInitialization is done with\n\n```java\n// Usually, you want to check if the card is initialized before trying to initialize it, otherwise you will receive an\n// error.\nif (!info.isInitializedCard()) {\n  // The PIN must be 6 digits, the PUK 12 digits and the pairing password can be any password. \n  // All parameters are strings\n  cmdSet.init(pin, puk, pairingPassword).checkOK();\n}\n```\n\n### Pairing\n\nClients wishing to communicate with the card, need to pair with it first. This allows creating secure channels resistant not only to passive but also to active MITM attacks. Although pairing allows the card and the client to authenticate each other, the card does not grant access to any operation with the wallet until the user is authenticated (by verifying its PIN). To establish the pairing, the client needs to know the pairing password. After it is established, the pairing info (not the password) must be stored as securely as possible on the client for subsequent sessions. You should store the pairing information together with the instance UID to simplify handling of multiple cards.\n\nOnly 5 clients can be paired at once, but it is possible to unpair previously paired clients.\n\nUsing the SDK, pairing is a simple operation\n\n```java\n// pairingPassword is usually provided by the user. This method throws an exception if pairing fails.\ncmdSet.autoPair(pairingPassword);\n// Retrieves the pairing object from the command set. This is what must be persisted (together with the instance UID)\nPairing pairing = cmdSet.getPairing();\n// The pairing object can be serialized by calling\npairing.toByteArray();\n// or the convenience method\npairing.toBase64();\n```\n\nIf you have already paired, you should instead load the persisted pairing information in the command set\n\n```java\n// serializedPairing can be either the byte array or base64 string representation\nPairing pairing = new Pairing(serializedPairing);\n// Sets the pairing info in the command set. This must be done before further operation is possible\ncmdSet.setPairing(pairing);\n```\n\n### Secure Channel\n\nAfter a pairing has been established, a secure channel can be opened. Before opening a secure channel, the card won't allow sending any command. This guarantees secrecy, integrity and authenticity of the commands. Opening a secure channel must be performed every time the applet is selected (this means also after a power loss). After opening it, the SDK handles the secure channel transparently, encrypting and signing all command APDUs and decrypting and verifying the signature of all responses. To open a secure channel all you need to do is\n\n```java\ncmdSet.autoOpenSecureChannel();\n```\n\n### Authenticating the user\n\nMost operations with the card (all involving operations with the wallet or credentials) require authenticating the user. After authentication, the user remains authenticated until the card is powered off or the application is re-selected.\n\nAuthentication is performed by verifying the user PIN. Note that this piece of information is sensitive and must be handled accordingly in the application. PIN verification is done with a single step\n\n```java\n// pin is the user PIN as a string of 6 digits\ntry {\n  cmdSet.verifyPIN(pin).checkAuthOK();\n} catch(WrongPINException e) {\n  System.out.println(\"Number of remaining attempts: \" + e.getRetryAttempts());\n}\n```\n\nif the PIN is wrong, you will receive an error SW in the format 0x63CX where X is the number of attempts remaining. When the number of remaining attempts is 0, the card is blocked. The user must then enter the PUK and a new PIN to restore access to the card. The maximum number of retries for the PUK is 5. To simplify things, the `APDUResponse.checkAuthOK()` method can be used to verify if the authentication was correct, and if not throw a `WrongPINException` which contains the number of remaining attempts.\n\n```java\ncmdSet.unblockPIN(puk, newPIN).checkAuthOK();\n```\n\n## Creating a wallet\n\nTo actually use the Keycard, it needs to have a wallet. This can be achieved in several different ways, which one you choose depends on your usage scenario. Creating a wallet requires user authentication and is possible even if a wallet already exists on the card (the new wallet replaces the old one). Use the `ApplicationInfo.hasMasterKey()` method to determine if the card already has a wallet or not. Note that the response of the `KeycardCommandSet.loadKey` method contains the key UID of the created wallet. This UID can be stored to keep track of this specific wallet in the client. The UID is tied to the key itself (is derived from the public key) so it will change if the wallet on card is replaced. The key UID is also part of the response of the applet selection command, so the wallet can be identified immediately upon selection.\n\n### Creating a BIP39 mnemonic phrase\n\nThis method is great for interoperability with other wallets. The card can assist in creating the mnemonic phrase, since it features a TRNG. Generating the mnemonic itself does not require user authentication (since it does not modify the card state), but loading the key derived from it does. Example of the entire procedure is below\n\n```java\n// Generates a Mnemonic object from the card. You can choose between generating 12, 15, 18, 21 or 24 words\nMnemonic mnemonic = new Mnemonic(cmdSet.generateMnemonic(KeycardCommandSet.GENERATE_MNEMONIC_12_WORDS).checkOK().getData());\n\n// We need to set a wordlist if we plan using this object to derive the binary seed. We can set our own list or we can\n// fatch the official BIP39 english word list as shown below.\nmnemonic.fetchBIP39EnglishWordlist();\n\n// If we did not verify the PIN before, we can do it now\ncmdSet.verifyPIN(pin).checkOK();\n\n// Loads the key generated from the mnemonic phrase.\ncmdSet.loadKey(mnemonic.toBIP32KeyPair()).checkOK();\n```\n\n### Importing a wallet from BIP39 mnemonic phrase\n\nImporting an existing passphrase requires only the loading step.\n\n```java\n// The passphrase is a string with space separated words. The password can be any non-null string, usually is empty.\ncmdSet.loadKey(Mnemonic.toBinarySeed(passphrase, password)).checkOK();\n```\n\n### Generating keys on-card\n\nThis is the simplest and safest method, because the generated wallet never leaves the card and there is no \"paper backup\" to keep secure. It is possible to create secure duplicates of the wallet on other Keycards, with a mechanism described in later chapters. Using the SDK, you simply do\n\n```java\ncmdSet.generateKey().checkOK();\n```\n\n### Importing an EC keypair\n\nYou can import on the keycard any EC keypair on the SECP256k1 curve, with or without the BIP32 extension. If your import a key without the BIP32 extension, then key derivation will not work, but you will still be able to use the Keycard for signing transactions using the imported key. This scenario can be useful if you are migrating from a wallet not using BIP39 passphrases or for wallets following some custom generation rules. It is however generally preferable to use one of the methods presented above.\n\nAn example of key import is\n\n```java\n// privKey is the S component of the key, as a 32-byte long byte array\n// chainCode is the extension to the keypair defined by BIP32, this is another 32-byte long byte array. Can be null, in\n// which case the created wallet won't be BIP32 compatible.\n// pubKey is the DER encoded, uncompressed public key. Can be null, in which case it is automatically calculated from\n// the private key.\nBIP32KeyPair keypair = new BIP32KeyPair(privKey, chainCode, pubKey);\n\n// Loads the keypair\ncmdSet.loadKey(keypair).checkOK();\n```\n\n## Key derivation\n\nAs mentioned before, the Keycard is a BIP32 compatible wallet. This means that it can perform key derivation as defined by the BIP32 specification in order to create a hierarchical deterministic wallet. When deriving a key, this key becomes active, which means that it will be used for all signing operations until a key with a different path is derived. The active key is persisted across sessions, meaning that a power loss or applet reselection does not reset it.\n\nWhen creating or importing a wallet to the Keycard, the active key is the master key. Unless you imported a non-BIP32 compatible wallet, you usually want to set the active key to a currency account by following the BIP44 specifications for paths. Note that the maximum depth of the key path is 10, excluding the master key.\n\nKey derivation requires user authentication\n\nSince a line of code is worth a thousand words, below is an example of deriving a standard key path\n\n```java\ncmdSet.deriveKey(\"m/44'/0'/0'/0/0\").checkOK();\n```\n\nSince deriving a key is an expensive operation, you usually want to know what the current path is before performing derivation. You can do this with\n\n```java\n// you can then get is as a string with currentPath.toString()\nKeyPath currentPath = new KeyPath(cmdSet.getStatus(KeycardCommandSet.GET_STATUS_P1_KEY_PATH).checkOK().getData());\n```\n\nTo speed up operations, key derivation can be started not only from the master key, but also from the parent or the current key. The path in this case starts respectively with \"../\" and \"./\". You cannot navigate the hierarchy with multiple \"..\" in the paths, because only the direct parent of the current key is cached. Derivation from parent is especially convenient when switching between accounts of the same type. Example\n\n```java\n// Derive the main account\ncmdSet.deriveKey(\"m/44'/0'/0'/0/0\").checkOK();\n\n// switch a secondary account, equivalent to \"m/44'/0'/0'/0/1\" but much faster\ncmdSet.deriveKey(\"../1\").checkOK();\n\n// you can switch back and forth between siblings without limitations.\ncmdSet.deriveKey(\"../0\").checkOK();\n```\n\n## Signing\n\nYour Keycard has been initialized, has a wallet and you have derived the keypath you need. You can now perform transactions by signing them with the card. Since the Keycard has no user input/output capabilities, it would be useless to transfer the entire transaction to the card for signing. You should instead calculate the transaction hash, according to the rules of the cryptocurrency you are handling and send that for signature instead. This also means, that you can handle anything which requires ECDSA signatures over SECP256k1 curve, regardless of the used hashing algorithm (at the condition that it output a 256-bit hash of course). This opens the door to signing transactions for the most common cryptocurrencies, but also makes it usable outside the realm of crypto transactions.\n\nSigning is done as\n\n```java\n// hash is the hash to sign, for example the Keccak-256 hash of an Ethereum transaction\n// the signature object contains r, s, recId and the public key associated to this signature\nRecoverableSignature signature = new RecoverableSignature(hash, cmdSet.sign(hash).checkOK().getData());\n```\n\nSigning requires user authentication.\n\n## Exporting (public or EIP-1581 compliant) keys\n\nSorry for the long title, but let's make it immediately clear: the keys used to sign transactions never leave the card and cannot be exported. You can however export any public key as well as the private key of keypaths defined in the [EIP-1581 specifications](https://eips.ethereum.org/EIPS/eip-1581). Those keys, by design, are not to be used for transactions but are instead usable for operations with lower security concerns where caching or storing the key outside the card might be beneficial from an UX point of view. Of course, exporting a key always requires user authentication.\n\n### Exporting the current key\n\n```java\n// Exports the current public key. This is allowed for any key path\nBIP32KeyPair publicKey = BIP32KeyPair.fromTLV(cmdSet.exportCurrentKey(true).checkOK().getData());\n\n// Exports the entire key pair. This is only allowed for key path following the EIP-1581 definition\nBIP32KeyPair keypair = BIP32KeyPair.fromTLV(cmdSet.exportCurrentKey(false).checkOK().getData());\n```\n\n### Derive & export\n\nThe export command is very powerful, since it allows you to derive & export a key in one step. You have the option to make the derived and exported key active or leave the active key untouched. You can also decide whether to export only the public key or the entire keypair (following the rules defined above).\n\nA very convenient use case is deriving an account key and retrieving the public key in one step. This is faster than doing it with two commands (derive key and export public), because every command processed has some overhead. Example\n\n```java\n// The first parameter is the keypath, the second tells whether that you want to make the derived & exported key active\n// and the third tells that you only want the public key to be exported.\nBIP32KeyPair publicKey = BIP32KeyPair.fromTLV(cmdSet.exportKey(\"m/44'/0'/0'/0/0\", true, true).checkOK().getData());\n\n// The line above is equivalent to\n// cmdSet.deriveKey(\"m/44'/0'/0'/0/0\").checkOK();\n// BIP32KeyPair publicKey = BIP32KeyPair.fromTLV(cmdSet.exportCurrentKey(true).checkOK().getData());\n```\n\nAnother use case, is to export keys defined by EIP-1581 without changing the current active key, since you won't be signing with the exported key using the card\n\n```java\n// Let's assume the current active path is \"m/44'/0'/0'/0/0\"\n\n// The first parameter is the key path, the second tells that you do not want to make it current and the third that you\n// want the entire keypair, not only the public key\nBIP32KeyPair keypair = BIP32KeyPair.fromTLV(cmdSet.exportKey(\"m/43'/60'/1581'/0'/0\", false, false).checkOK().getData());\n\n// At this point, the current active path would still be \"m/44'/0'/0'/0/0\"\n```\n\n## Changing credentials\n\nAll credentials of the Keycard can be changed (PIN, PUK, pairing password). Changing the pairing password does not invalidate existing pairings, but applies to the ones which can be created in the future. Changing credentials, requires user authentication.\n\n```java\n// Changes the user PIN\ncmdSet.changePIN(\"123456\").checkOK();\n\n// Changes the PUK\ncmdSet.changePUK(\"123456123456\").checkOK();\n\n// Changes the pairing password\ncmdSet.changePairingPassword(\"my pairing password\").checkOK();\n```\n\n## Duplication\n\nCard duplication is especially relevant when the keys have been generated on-card, without using BIP39 mnemonic (or when this has been destroyed). To make duplication secure the client must not possess the (full) encryption key. For this reason, a scheme where multiple clients are used and none of them has the full key has been devised. From the user point of view, the duplication process goes like this\n\n1. Take the card to be duplicated (source) and one or more cards to duplicate to (target)\n2. On one of the user's clients initiate the duplication. This involves entering the PIN of each of the involved cards\n3. Tap all cards to one or more additional clients (the amount must be defined before, the order is irrelevant). These clients do not need to be paired or be trusted, so the user can borrow a friend's phone without compromising security. This step does not require entering a PIN\n4. On one of the user's clients, usually the same which initiated the duplication (must be paired, trusted) finalize the duplication by first tapping the source card and then all target cards, again inserting the PIN for each.\n   \nAt the end of procedure, each card will have the same master key, but PIN, PUK and pairing key remain unchanged and are independent from each other. A client could propose changing them to be all the same if desired or do this automatically. All cards are fully functional, so at this point there isn't any difference between the source card and the targets.\n\nSince the cards are still protected by the PIN, these can be stored remotely in moderately trusted places to recover from lost or destroyed cards. The duplication has been performed securely since no client ever had the full encryption key and no authentication credentials has been inserted on untrusted clients. For flexibility reason, an arbitrary number of clients can be used. Using a single client could be convenient from an UX point of view, but relies on said client not being compromised. Using 2 or 3 clients greatly increases security. More than 3 clients is probably an overkill.\n\nFrom an implementation point of view, we have two different roles a client can take\n\n1. The trusted client, starting and performing the duplication\n2. The (possibly) untrusted clients, only adding entropy to the encryption key\n\nBoth can be implemented by using the `CardDuplicator` class. On each client, the same instance of the `CardDuplicator` class must be used for the entire duplication process, otherwise duplication will fail.\n\nThe trusted client must also provide an implementation of `DuplicatorCallback`. This is needed to retrieve the Pairing and PIN for each card. Example below\n\n```java\nclass MyDuplicatorCB implements DuplicatorCallback {\n  Pairing getPairing(ApplicationInfo applicationInfo) {\n    // The Instance UID is the one to use when storing/retrieving pairings\n    byte[] uid = applicationInfo.getInstanceUID();\n    \n    // Using the UID try to retrieve the pairing. The method getSavedPairing is an example and is not part of the SDK,\n    // you are responsible of how you store and retrieve pairing data in your app\n    Pairing pairing = getSavedPairing(uid);\n    \n    // Optionally, you could prompt the user and make a new pairing if none if given, but this is an UX decision in\n    // your application.\n    if (pairing == null) {\n      pairing = tryToPair();\n    }\n    \n    // possibly null, in this case the operation requiring pairing is aborted\n    return pairing;\n  }\n  \n  String getPIN(ApplicationInfo applicationInfo, int remainingAttempts) {\n    // Optionally, you might have a cache of PINs for recently used card, but this should be done carefully as the PIN\n    // is sensitive data. You might instead want to just prompt the user each time.\n    String pin = getCachedPIN(applicationInfo.getInstanceUID());\n    \n    if (pin == null) {\n      // prompt the user to insert the PIN. You can optionally inform them about how many retry attempts are left.\n      // For UX reason you could also use the instance UID to show the user an identifiable name, this is again\n      // application specific.\n      pin = promptUser(remainingAttempts);\n    }\n    \n    // This must not be null. PIN verification will be performed by the CardDuplicator itself, do no not perform it here!\n    return pin;\n  }\n}\n```\n\nThe next step to do, is instantiating a CardDuplicator.\n\nFor the trusted client\n\n```java\n// The cmdSet is a KeycardCommandSet instance, duplicatorCallback is an object implementing the DuplicatorCallback\n// interface\ncardDuplicator = new CardDuplicator(cmdSet, duplicatorCallback);\n```\n\nFor the untrusted clients\n\n```java\n// apduChannel is a CardChannel instance. Alternatively the same constructor as for the trusted client can be used,\n// passing null as the second parameter.\ncardDuplicator = new CardDuplicator(apduChannel);\n```\n\nOnce the instance has been created, depending on the role and state the client must perform a specific action every time a new card is presented. The CardDuplicator keeps track of the action performed on any card, so if the user presents the same card twice an `IllegalStateException` exception is thrown.\n\nTo start duplication on a card, for example, you might do\n\n```java\n// Client count is the amount of devices contributing to forming the entire key. This means 1 + the number of clients\n// which will be adding entropy (the untrusted clients)\ncardDuplicator.startDuplication(clientCount);\n```\n\nOn untrusted clients, to add entropy, you do\n\n```java\ncardDuplicator.addEntropy();\n```\n\nWhen the full key has been stored on all cards, you then call the following method on the source card on a trusted client\n\n```java\nbyte[] exportedKey = cardDuplicator.exportKey();\n```\n\nwhereas, from the same client, you invoke on all target cards the following\n\n```java\n// you should then check that the keyUID matches the one of the source card to be sure that the duplication has been\n// performed correctly.\nbyte[] keyUID = cardDuplicator.importKey(exportedKey);\n```\n","source":"api/java-sdk.md","raw":"---\nid: java-sdk\ntitle: Keycard Java SDK\n---\n\n## Installation\n\nYou can import the SDK in your Gradle or Maven project using [Jitpack.io](https://jitpack.io). If using Gradle, to use\nJitPack all you have to do is insert these lines in you `build.gradle` file\n\n```groovy\nallprojects {\n  repositories {\n    maven { url 'https://jitpack.io' }\n  }\n}\n```\n\nThen, you must import the correct dependency. In case you are building an Android-based project, you need to add this line\n\n```groovy\ndependencies {\n  implementation 'com.github.status-im.status-keycard-java:android:2.0.0'\n}\n```\n\nIf you are working on the desktop, then you need this line instead\n\n```groovy\ndependencies {\n  implementation 'com.github.status-im.status-keycard-java:desktop:2.0.0'\n}\n```\n\nIn both case, you will have the same SDK, except for the way connection with the card is established.\n\n## Connecting to the card (Android)\n\nOn Android, the NFC connection handling must happen on a thread separate from the UI thread. The SDK provides the class `NFCCardManager` to handle this. This an example activity starting the NFC reader and handling the connection to the card. Refer to the comments in the example for more information.\n\n```java\npublic class MainActivity extends AppCompatActivity {\n  private NfcAdapter nfcAdapter;\n  private NFCCardManager cardManager;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    \n    // Get the Android NFC default adapter\n    nfcAdapter = NfcAdapter.getDefaultAdapter(this);\n    \n    // Create the NFCCardManager, this class is provided by the Keycard SDK and handles connections to the card\n    cardManager = new NFCCardManager();\n\n    // The Card Listener receives the connected/disconnected events. These can happen at any time since the user can\n    // introduce or remove the card to/from the field at any time. This is where your code goes.\n    cardManager.setCardListener(new CardListener() {\n      @Override\n      public void onConnected(CardChannel cardChannel) {\n        // Card is connected. Here you can start working with the Keycard. The CardChannel is what you will use to\n        // communicate with the card.\n      }\n\n      @Override\n      public void onDisconnected() {\n        // Card is disconnected (was removed from the field). You can perform cleanup here.\n      }\n    });\n    cardManager.start();\n  }\n\n  @Override\n  public void onResume() {\n    super.onResume();\n    \n    // We need to enable the reader on resume.\n    if (nfcAdapter != null) {\n      nfcAdapter.enableReaderMode(this, this.cardManager, NfcAdapter.FLAG_READER_NFC_A | NfcAdapter.FLAG_READER_SKIP_NDEF_CHECK, null);\n    }\n  }\n\n  @Override\n  public void onPause() {\n    super.onPause();\n    \n    // We disable the reader on pause to allow other apps to use it.\n    if (nfcAdapter != null) {\n      nfcAdapter.disableReaderMode(this);\n    }\n  }\n}\n```\n\n## Connecting to the card (Desktop)\n\nOn the desktop we use the javax.smartcardio library. There are several ways to handle connections, the important part is getting a CardChannel open. Below is an example of how this can be achieved (assumes that a single smartcard reader is connected).\n\n```java\n// We create a TerminalFactory object\nTerminalFactory tf = TerminalFactory.getDefault();\nCardTerminal cardTerminal;\n\n// We search a terminal with a card inside\nfor (CardTerminal t : tf.terminals().list()) {\nif (t.isCardPresent()) {\n  cardTerminal = t;\n  break;\n    }\n  }\n}\n\n// If not found, we throw an exception. Of course you should decide how to handle this situation\nif (cardTerminal == null) {\n  throw new RuntimeException(\"No terminal found\");\n}\n\n// If a terminal is found, we connect to it\nCard apduCard = cardTerminal.connect(\"*\");\n\n// We create a PCSCCardChannel, which is an implementation of CardChannel and can be used with the rest of the SDK.\nPCSCCardChannel apduChannel = new PCSCCardChannel(apduCard.getBasicChannel());\n```\n\n## Working with the card\n\nRegardless whether you are on Android or desktop, you should at this point have an implementation of the CardChannel interface (be it NFCCardChannel or PCSCCardChannel). You can now start working with the card. The first thing to do is creating a `KeycardCommandSet` instance. This class gives access to all of the applet functionality, wrapping the low-level APDUs in easy to use methods. All other classes in the SDK are helper to format parameters and parse responses from the card. To create a command set, just do\n\n```java\n// cardChannel is our CardChannel instance\nKeycardCommandSet cmdSet = new KeycardCommandSet(cardChannel);\n```\n\nModern SmartCards can have several applications installed, so after connection with the card you need to select the Keycard applet. This is easily done with\n\n```java\n// The checkOK method can be called on any APDUResponse object to confirm that the\ncmdSet.select().checkOK();\n```\n\nWhile this correctly selects the applet, it discards the card response, which contains information that can be useful to identify this specific card and its state. For this reason we could rewrite this as\n\n```java\nApplicationInfo info = new ApplicationInfo(cmdSet.select().checkOK().getData());\n\n// This method tells if the card is initialized (has a PIN, PUK and pairing password). If it is not, it must be\n// initialized and no other operation is possible. Note that initialization touches only credentials to authenticate\n// the user or the client, but does not touch the creation of a wallet on the card\ninfo.isInitializedCard();\n\n// Returns the instance UID of the applet. This can be used to identify this specific applet instance, very\n// useful when storing instance-specific data on the client (pairing info, cached data, etc).\ninfo.getInstanceUID();\n\n// Returns the version of the applet.\ninfo.getAppVersion();\n\n// Returns the number of free pairing slots. If you are not yet paired with the card, it helps you know if you can still\n// pair or not\ninfo.getFreePairingSlots());\n\n// Tells if the card has a wallet or not. If no wallet is available, you must create once before you can perform most\n// operations on the card\ninfo.hasMasterKey();\n\n// Returns the UID of the master key of the wallet. The UID is value generated starting from the public key and is \n// useful to identify if the card has the expected wallet.\ninfo.getKeyUID();\n```\n\nAfter the applet is selected, you can start working with it. Note that the application remains selected until another applet is explicitly selected, or the card is powered off (for example is removed from the field)\n\n### Initialization\n\nThis step is necessary to bring the initial credentials on the Keycard instance. When the card is not initialized, it cannot perform any operation. Initialization sets the initial PIN, PUK and pairing password and requires no authentication, but still uses a SecureChannel resistant to passive MITM attacks. Once the card is initialized, it cannot be initialized again (but credentials can be different with a different mechanism with previous authentication).\n\nInitialization is done with\n\n```java\n// Usually, you want to check if the card is initialized before trying to initialize it, otherwise you will receive an\n// error.\nif (!info.isInitializedCard()) {\n  // The PIN must be 6 digits, the PUK 12 digits and the pairing password can be any password. \n  // All parameters are strings\n  cmdSet.init(pin, puk, pairingPassword).checkOK();\n}\n```\n\n### Pairing\n\nClients wishing to communicate with the card, need to pair with it first. This allows creating secure channels resistant not only to passive but also to active MITM attacks. Although pairing allows the card and the client to authenticate each other, the card does not grant access to any operation with the wallet until the user is authenticated (by verifying its PIN). To establish the pairing, the client needs to know the pairing password. After it is established, the pairing info (not the password) must be stored as securely as possible on the client for subsequent sessions. You should store the pairing information together with the instance UID to simplify handling of multiple cards.\n\nOnly 5 clients can be paired at once, but it is possible to unpair previously paired clients.\n\nUsing the SDK, pairing is a simple operation\n\n```java\n// pairingPassword is usually provided by the user. This method throws an exception if pairing fails.\ncmdSet.autoPair(pairingPassword);\n// Retrieves the pairing object from the command set. This is what must be persisted (together with the instance UID)\nPairing pairing = cmdSet.getPairing();\n// The pairing object can be serialized by calling\npairing.toByteArray();\n// or the convenience method\npairing.toBase64();\n```\n\nIf you have already paired, you should instead load the persisted pairing information in the command set\n\n```java\n// serializedPairing can be either the byte array or base64 string representation\nPairing pairing = new Pairing(serializedPairing);\n// Sets the pairing info in the command set. This must be done before further operation is possible\ncmdSet.setPairing(pairing);\n```\n\n### Secure Channel\n\nAfter a pairing has been established, a secure channel can be opened. Before opening a secure channel, the card won't allow sending any command. This guarantees secrecy, integrity and authenticity of the commands. Opening a secure channel must be performed every time the applet is selected (this means also after a power loss). After opening it, the SDK handles the secure channel transparently, encrypting and signing all command APDUs and decrypting and verifying the signature of all responses. To open a secure channel all you need to do is\n\n```java\ncmdSet.autoOpenSecureChannel();\n```\n\n### Authenticating the user\n\nMost operations with the card (all involving operations with the wallet or credentials) require authenticating the user. After authentication, the user remains authenticated until the card is powered off or the application is re-selected.\n\nAuthentication is performed by verifying the user PIN. Note that this piece of information is sensitive and must be handled accordingly in the application. PIN verification is done with a single step\n\n```java\n// pin is the user PIN as a string of 6 digits\ntry {\n  cmdSet.verifyPIN(pin).checkAuthOK();\n} catch(WrongPINException e) {\n  System.out.println(\"Number of remaining attempts: \" + e.getRetryAttempts());\n}\n```\n\nif the PIN is wrong, you will receive an error SW in the format 0x63CX where X is the number of attempts remaining. When the number of remaining attempts is 0, the card is blocked. The user must then enter the PUK and a new PIN to restore access to the card. The maximum number of retries for the PUK is 5. To simplify things, the `APDUResponse.checkAuthOK()` method can be used to verify if the authentication was correct, and if not throw a `WrongPINException` which contains the number of remaining attempts.\n\n```java\ncmdSet.unblockPIN(puk, newPIN).checkAuthOK();\n```\n\n## Creating a wallet\n\nTo actually use the Keycard, it needs to have a wallet. This can be achieved in several different ways, which one you choose depends on your usage scenario. Creating a wallet requires user authentication and is possible even if a wallet already exists on the card (the new wallet replaces the old one). Use the `ApplicationInfo.hasMasterKey()` method to determine if the card already has a wallet or not. Note that the response of the `KeycardCommandSet.loadKey` method contains the key UID of the created wallet. This UID can be stored to keep track of this specific wallet in the client. The UID is tied to the key itself (is derived from the public key) so it will change if the wallet on card is replaced. The key UID is also part of the response of the applet selection command, so the wallet can be identified immediately upon selection.\n\n### Creating a BIP39 mnemonic phrase\n\nThis method is great for interoperability with other wallets. The card can assist in creating the mnemonic phrase, since it features a TRNG. Generating the mnemonic itself does not require user authentication (since it does not modify the card state), but loading the key derived from it does. Example of the entire procedure is below\n\n```java\n// Generates a Mnemonic object from the card. You can choose between generating 12, 15, 18, 21 or 24 words\nMnemonic mnemonic = new Mnemonic(cmdSet.generateMnemonic(KeycardCommandSet.GENERATE_MNEMONIC_12_WORDS).checkOK().getData());\n\n// We need to set a wordlist if we plan using this object to derive the binary seed. We can set our own list or we can\n// fatch the official BIP39 english word list as shown below.\nmnemonic.fetchBIP39EnglishWordlist();\n\n// If we did not verify the PIN before, we can do it now\ncmdSet.verifyPIN(pin).checkOK();\n\n// Loads the key generated from the mnemonic phrase.\ncmdSet.loadKey(mnemonic.toBIP32KeyPair()).checkOK();\n```\n\n### Importing a wallet from BIP39 mnemonic phrase\n\nImporting an existing passphrase requires only the loading step.\n\n```java\n// The passphrase is a string with space separated words. The password can be any non-null string, usually is empty.\ncmdSet.loadKey(Mnemonic.toBinarySeed(passphrase, password)).checkOK();\n```\n\n### Generating keys on-card\n\nThis is the simplest and safest method, because the generated wallet never leaves the card and there is no \"paper backup\" to keep secure. It is possible to create secure duplicates of the wallet on other Keycards, with a mechanism described in later chapters. Using the SDK, you simply do\n\n```java\ncmdSet.generateKey().checkOK();\n```\n\n### Importing an EC keypair\n\nYou can import on the keycard any EC keypair on the SECP256k1 curve, with or without the BIP32 extension. If your import a key without the BIP32 extension, then key derivation will not work, but you will still be able to use the Keycard for signing transactions using the imported key. This scenario can be useful if you are migrating from a wallet not using BIP39 passphrases or for wallets following some custom generation rules. It is however generally preferable to use one of the methods presented above.\n\nAn example of key import is\n\n```java\n// privKey is the S component of the key, as a 32-byte long byte array\n// chainCode is the extension to the keypair defined by BIP32, this is another 32-byte long byte array. Can be null, in\n// which case the created wallet won't be BIP32 compatible.\n// pubKey is the DER encoded, uncompressed public key. Can be null, in which case it is automatically calculated from\n// the private key.\nBIP32KeyPair keypair = new BIP32KeyPair(privKey, chainCode, pubKey);\n\n// Loads the keypair\ncmdSet.loadKey(keypair).checkOK();\n```\n\n## Key derivation\n\nAs mentioned before, the Keycard is a BIP32 compatible wallet. This means that it can perform key derivation as defined by the BIP32 specification in order to create a hierarchical deterministic wallet. When deriving a key, this key becomes active, which means that it will be used for all signing operations until a key with a different path is derived. The active key is persisted across sessions, meaning that a power loss or applet reselection does not reset it.\n\nWhen creating or importing a wallet to the Keycard, the active key is the master key. Unless you imported a non-BIP32 compatible wallet, you usually want to set the active key to a currency account by following the BIP44 specifications for paths. Note that the maximum depth of the key path is 10, excluding the master key.\n\nKey derivation requires user authentication\n\nSince a line of code is worth a thousand words, below is an example of deriving a standard key path\n\n```java\ncmdSet.deriveKey(\"m/44'/0'/0'/0/0\").checkOK();\n```\n\nSince deriving a key is an expensive operation, you usually want to know what the current path is before performing derivation. You can do this with\n\n```java\n// you can then get is as a string with currentPath.toString()\nKeyPath currentPath = new KeyPath(cmdSet.getStatus(KeycardCommandSet.GET_STATUS_P1_KEY_PATH).checkOK().getData());\n```\n\nTo speed up operations, key derivation can be started not only from the master key, but also from the parent or the current key. The path in this case starts respectively with \"../\" and \"./\". You cannot navigate the hierarchy with multiple \"..\" in the paths, because only the direct parent of the current key is cached. Derivation from parent is especially convenient when switching between accounts of the same type. Example\n\n```java\n// Derive the main account\ncmdSet.deriveKey(\"m/44'/0'/0'/0/0\").checkOK();\n\n// switch a secondary account, equivalent to \"m/44'/0'/0'/0/1\" but much faster\ncmdSet.deriveKey(\"../1\").checkOK();\n\n// you can switch back and forth between siblings without limitations.\ncmdSet.deriveKey(\"../0\").checkOK();\n```\n\n## Signing\n\nYour Keycard has been initialized, has a wallet and you have derived the keypath you need. You can now perform transactions by signing them with the card. Since the Keycard has no user input/output capabilities, it would be useless to transfer the entire transaction to the card for signing. You should instead calculate the transaction hash, according to the rules of the cryptocurrency you are handling and send that for signature instead. This also means, that you can handle anything which requires ECDSA signatures over SECP256k1 curve, regardless of the used hashing algorithm (at the condition that it output a 256-bit hash of course). This opens the door to signing transactions for the most common cryptocurrencies, but also makes it usable outside the realm of crypto transactions.\n\nSigning is done as\n\n```java\n// hash is the hash to sign, for example the Keccak-256 hash of an Ethereum transaction\n// the signature object contains r, s, recId and the public key associated to this signature\nRecoverableSignature signature = new RecoverableSignature(hash, cmdSet.sign(hash).checkOK().getData());\n```\n\nSigning requires user authentication.\n\n## Exporting (public or EIP-1581 compliant) keys\n\nSorry for the long title, but let's make it immediately clear: the keys used to sign transactions never leave the card and cannot be exported. You can however export any public key as well as the private key of keypaths defined in the [EIP-1581 specifications](https://eips.ethereum.org/EIPS/eip-1581). Those keys, by design, are not to be used for transactions but are instead usable for operations with lower security concerns where caching or storing the key outside the card might be beneficial from an UX point of view. Of course, exporting a key always requires user authentication.\n\n### Exporting the current key\n\n```java\n// Exports the current public key. This is allowed for any key path\nBIP32KeyPair publicKey = BIP32KeyPair.fromTLV(cmdSet.exportCurrentKey(true).checkOK().getData());\n\n// Exports the entire key pair. This is only allowed for key path following the EIP-1581 definition\nBIP32KeyPair keypair = BIP32KeyPair.fromTLV(cmdSet.exportCurrentKey(false).checkOK().getData());\n```\n\n### Derive & export\n\nThe export command is very powerful, since it allows you to derive & export a key in one step. You have the option to make the derived and exported key active or leave the active key untouched. You can also decide whether to export only the public key or the entire keypair (following the rules defined above).\n\nA very convenient use case is deriving an account key and retrieving the public key in one step. This is faster than doing it with two commands (derive key and export public), because every command processed has some overhead. Example\n\n```java\n// The first parameter is the keypath, the second tells whether that you want to make the derived & exported key active\n// and the third tells that you only want the public key to be exported.\nBIP32KeyPair publicKey = BIP32KeyPair.fromTLV(cmdSet.exportKey(\"m/44'/0'/0'/0/0\", true, true).checkOK().getData());\n\n// The line above is equivalent to\n// cmdSet.deriveKey(\"m/44'/0'/0'/0/0\").checkOK();\n// BIP32KeyPair publicKey = BIP32KeyPair.fromTLV(cmdSet.exportCurrentKey(true).checkOK().getData());\n```\n\nAnother use case, is to export keys defined by EIP-1581 without changing the current active key, since you won't be signing with the exported key using the card\n\n```java\n// Let's assume the current active path is \"m/44'/0'/0'/0/0\"\n\n// The first parameter is the key path, the second tells that you do not want to make it current and the third that you\n// want the entire keypair, not only the public key\nBIP32KeyPair keypair = BIP32KeyPair.fromTLV(cmdSet.exportKey(\"m/43'/60'/1581'/0'/0\", false, false).checkOK().getData());\n\n// At this point, the current active path would still be \"m/44'/0'/0'/0/0\"\n```\n\n## Changing credentials\n\nAll credentials of the Keycard can be changed (PIN, PUK, pairing password). Changing the pairing password does not invalidate existing pairings, but applies to the ones which can be created in the future. Changing credentials, requires user authentication.\n\n```java\n// Changes the user PIN\ncmdSet.changePIN(\"123456\").checkOK();\n\n// Changes the PUK\ncmdSet.changePUK(\"123456123456\").checkOK();\n\n// Changes the pairing password\ncmdSet.changePairingPassword(\"my pairing password\").checkOK();\n```\n\n## Duplication\n\nCard duplication is especially relevant when the keys have been generated on-card, without using BIP39 mnemonic (or when this has been destroyed). To make duplication secure the client must not possess the (full) encryption key. For this reason, a scheme where multiple clients are used and none of them has the full key has been devised. From the user point of view, the duplication process goes like this\n\n1. Take the card to be duplicated (source) and one or more cards to duplicate to (target)\n2. On one of the user's clients initiate the duplication. This involves entering the PIN of each of the involved cards\n3. Tap all cards to one or more additional clients (the amount must be defined before, the order is irrelevant). These clients do not need to be paired or be trusted, so the user can borrow a friend's phone without compromising security. This step does not require entering a PIN\n4. On one of the user's clients, usually the same which initiated the duplication (must be paired, trusted) finalize the duplication by first tapping the source card and then all target cards, again inserting the PIN for each.\n   \nAt the end of procedure, each card will have the same master key, but PIN, PUK and pairing key remain unchanged and are independent from each other. A client could propose changing them to be all the same if desired or do this automatically. All cards are fully functional, so at this point there isn't any difference between the source card and the targets.\n\nSince the cards are still protected by the PIN, these can be stored remotely in moderately trusted places to recover from lost or destroyed cards. The duplication has been performed securely since no client ever had the full encryption key and no authentication credentials has been inserted on untrusted clients. For flexibility reason, an arbitrary number of clients can be used. Using a single client could be convenient from an UX point of view, but relies on said client not being compromised. Using 2 or 3 clients greatly increases security. More than 3 clients is probably an overkill.\n\nFrom an implementation point of view, we have two different roles a client can take\n\n1. The trusted client, starting and performing the duplication\n2. The (possibly) untrusted clients, only adding entropy to the encryption key\n\nBoth can be implemented by using the `CardDuplicator` class. On each client, the same instance of the `CardDuplicator` class must be used for the entire duplication process, otherwise duplication will fail.\n\nThe trusted client must also provide an implementation of `DuplicatorCallback`. This is needed to retrieve the Pairing and PIN for each card. Example below\n\n```java\nclass MyDuplicatorCB implements DuplicatorCallback {\n  Pairing getPairing(ApplicationInfo applicationInfo) {\n    // The Instance UID is the one to use when storing/retrieving pairings\n    byte[] uid = applicationInfo.getInstanceUID();\n    \n    // Using the UID try to retrieve the pairing. The method getSavedPairing is an example and is not part of the SDK,\n    // you are responsible of how you store and retrieve pairing data in your app\n    Pairing pairing = getSavedPairing(uid);\n    \n    // Optionally, you could prompt the user and make a new pairing if none if given, but this is an UX decision in\n    // your application.\n    if (pairing == null) {\n      pairing = tryToPair();\n    }\n    \n    // possibly null, in this case the operation requiring pairing is aborted\n    return pairing;\n  }\n  \n  String getPIN(ApplicationInfo applicationInfo, int remainingAttempts) {\n    // Optionally, you might have a cache of PINs for recently used card, but this should be done carefully as the PIN\n    // is sensitive data. You might instead want to just prompt the user each time.\n    String pin = getCachedPIN(applicationInfo.getInstanceUID());\n    \n    if (pin == null) {\n      // prompt the user to insert the PIN. You can optionally inform them about how many retry attempts are left.\n      // For UX reason you could also use the instance UID to show the user an identifiable name, this is again\n      // application specific.\n      pin = promptUser(remainingAttempts);\n    }\n    \n    // This must not be null. PIN verification will be performed by the CardDuplicator itself, do no not perform it here!\n    return pin;\n  }\n}\n```\n\nThe next step to do, is instantiating a CardDuplicator.\n\nFor the trusted client\n\n```java\n// The cmdSet is a KeycardCommandSet instance, duplicatorCallback is an object implementing the DuplicatorCallback\n// interface\ncardDuplicator = new CardDuplicator(cmdSet, duplicatorCallback);\n```\n\nFor the untrusted clients\n\n```java\n// apduChannel is a CardChannel instance. Alternatively the same constructor as for the trusted client can be used,\n// passing null as the second parameter.\ncardDuplicator = new CardDuplicator(apduChannel);\n```\n\nOnce the instance has been created, depending on the role and state the client must perform a specific action every time a new card is presented. The CardDuplicator keeps track of the action performed on any card, so if the user presents the same card twice an `IllegalStateException` exception is thrown.\n\nTo start duplication on a card, for example, you might do\n\n```java\n// Client count is the amount of devices contributing to forming the entire key. This means 1 + the number of clients\n// which will be adding entropy (the untrusted clients)\ncardDuplicator.startDuplication(clientCount);\n```\n\nOn untrusted clients, to add entropy, you do\n\n```java\ncardDuplicator.addEntropy();\n```\n\nWhen the full key has been stored on all cards, you then call the following method on the source card on a trusted client\n\n```java\nbyte[] exportedKey = cardDuplicator.exportKey();\n```\n\nwhereas, from the same client, you invoke on all target cards the following\n\n```java\n// you should then check that the keyUID matches the one of the source card to be sure that the duplication has been\n// performed correctly.\nbyte[] keyUID = cardDuplicator.importKey(exportedKey);\n```\n","date":"2019-01-17T08:29:06.583Z","updated":"2019-01-17T08:29:06.580Z","path":"api/java-sdk.html","_id":"cjqyxw7kw0001p0qe8jsu6rxq","comments":1,"layout":"page","content":"<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><p>You can import the SDK in your Gradle or Maven project using <a href=\"https://jitpack.io\" target=\"_blank\" rel=\"noopener\">Jitpack.io</a>. If using Gradle, to use<br>JitPack all you have to do is insert these lines in you <code>build.gradle</code> file</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">    maven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Then, you must import the correct dependency. In case you are building an Android-based project, you need to add this line</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  implementation <span class=\"string\">'com.github.status-im.status-keycard-java:android:2.0.0'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>If you are working on the desktop, then you need this line instead</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  implementation <span class=\"string\">'com.github.status-im.status-keycard-java:desktop:2.0.0'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In both case, you will have the same SDK, except for the way connection with the card is established.</p>\n<h2 id=\"Connecting-to-the-card-Android\"><a href=\"#Connecting-to-the-card-Android\" class=\"headerlink\" title=\"Connecting to the card (Android)\"></a>Connecting to the card (Android)</h2><p>On Android, the NFC connection handling must happen on a thread separate from the UI thread. The SDK provides the class <code>NFCCardManager</code> to handle this. This an example activity starting the NFC reader and handling the connection to the card. Refer to the comments in the example for more information.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> NfcAdapter nfcAdapter;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> NFCCardManager cardManager;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Get the Android NFC default adapter</span></span><br><span class=\"line\">    nfcAdapter = NfcAdapter.getDefaultAdapter(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Create the NFCCardManager, this class is provided by the Keycard SDK and handles connections to the card</span></span><br><span class=\"line\">    cardManager = <span class=\"keyword\">new</span> NFCCardManager();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The Card Listener receives the connected/disconnected events. These can happen at any time since the user can</span></span><br><span class=\"line\">    <span class=\"comment\">// introduce or remove the card to/from the field at any time. This is where your code goes.</span></span><br><span class=\"line\">    cardManager.setCardListener(<span class=\"keyword\">new</span> CardListener() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConnected</span><span class=\"params\">(CardChannel cardChannel)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Card is connected. Here you can start working with the Keycard. The CardChannel is what you will use to</span></span><br><span class=\"line\">        <span class=\"comment\">// communicate with the card.</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDisconnected</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Card is disconnected (was removed from the field). You can perform cleanup here.</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    cardManager.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// We need to enable the reader on resume.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nfcAdapter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      nfcAdapter.enableReaderMode(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.cardManager, NfcAdapter.FLAG_READER_NFC_A | NfcAdapter.FLAG_READER_SKIP_NDEF_CHECK, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// We disable the reader on pause to allow other apps to use it.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nfcAdapter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      nfcAdapter.disableReaderMode(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Connecting-to-the-card-Desktop\"><a href=\"#Connecting-to-the-card-Desktop\" class=\"headerlink\" title=\"Connecting to the card (Desktop)\"></a>Connecting to the card (Desktop)</h2><p>On the desktop we use the javax.smartcardio library. There are several ways to handle connections, the important part is getting a CardChannel open. Below is an example of how this can be achieved (assumes that a single smartcard reader is connected).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// We create a TerminalFactory object</span></span><br><span class=\"line\">TerminalFactory tf = TerminalFactory.getDefault();</span><br><span class=\"line\">CardTerminal cardTerminal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We search a terminal with a card inside</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (CardTerminal t : tf.terminals().list()) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (t.isCardPresent()) &#123;</span><br><span class=\"line\">  cardTerminal = t;</span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If not found, we throw an exception. Of course you should decide how to handle this situation</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (cardTerminal == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No terminal found\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If a terminal is found, we connect to it</span></span><br><span class=\"line\">Card apduCard = cardTerminal.connect(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We create a PCSCCardChannel, which is an implementation of CardChannel and can be used with the rest of the SDK.</span></span><br><span class=\"line\">PCSCCardChannel apduChannel = <span class=\"keyword\">new</span> PCSCCardChannel(apduCard.getBasicChannel());</span><br></pre></td></tr></table></figure>\n<h2 id=\"Working-with-the-card\"><a href=\"#Working-with-the-card\" class=\"headerlink\" title=\"Working with the card\"></a>Working with the card</h2><p>Regardless whether you are on Android or desktop, you should at this point have an implementation of the CardChannel interface (be it NFCCardChannel or PCSCCardChannel). You can now start working with the card. The first thing to do is creating a <code>KeycardCommandSet</code> instance. This class gives access to all of the applet functionality, wrapping the low-level APDUs in easy to use methods. All other classes in the SDK are helper to format parameters and parse responses from the card. To create a command set, just do</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cardChannel is our CardChannel instance</span></span><br><span class=\"line\">KeycardCommandSet cmdSet = <span class=\"keyword\">new</span> KeycardCommandSet(cardChannel);</span><br></pre></td></tr></table></figure>\n<p>Modern SmartCards can have several applications installed, so after connection with the card you need to select the Keycard applet. This is easily done with</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The checkOK method can be called on any APDUResponse object to confirm that the</span></span><br><span class=\"line\">cmdSet.select().checkOK();</span><br></pre></td></tr></table></figure>\n<p>While this correctly selects the applet, it discards the card response, which contains information that can be useful to identify this specific card and its state. For this reason we could rewrite this as</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ApplicationInfo info = <span class=\"keyword\">new</span> ApplicationInfo(cmdSet.select().checkOK().getData());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This method tells if the card is initialized (has a PIN, PUK and pairing password). If it is not, it must be</span></span><br><span class=\"line\"><span class=\"comment\">// initialized and no other operation is possible. Note that initialization touches only credentials to authenticate</span></span><br><span class=\"line\"><span class=\"comment\">// the user or the client, but does not touch the creation of a wallet on the card</span></span><br><span class=\"line\">info.isInitializedCard();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns the instance UID of the applet. This can be used to identify this specific applet instance, very</span></span><br><span class=\"line\"><span class=\"comment\">// useful when storing instance-specific data on the client (pairing info, cached data, etc).</span></span><br><span class=\"line\">info.getInstanceUID();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns the version of the applet.</span></span><br><span class=\"line\">info.getAppVersion();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns the number of free pairing slots. If you are not yet paired with the card, it helps you know if you can still</span></span><br><span class=\"line\"><span class=\"comment\">// pair or not</span></span><br><span class=\"line\">info.getFreePairingSlots());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tells if the card has a wallet or not. If no wallet is available, you must create once before you can perform most</span></span><br><span class=\"line\"><span class=\"comment\">// operations on the card</span></span><br><span class=\"line\">info.hasMasterKey();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns the UID of the master key of the wallet. The UID is value generated starting from the public key and is </span></span><br><span class=\"line\"><span class=\"comment\">// useful to identify if the card has the expected wallet.</span></span><br><span class=\"line\">info.getKeyUID();</span><br></pre></td></tr></table></figure>\n<p>After the applet is selected, you can start working with it. Note that the application remains selected until another applet is explicitly selected, or the card is powered off (for example is removed from the field)</p>\n<h3 id=\"Initialization\"><a href=\"#Initialization\" class=\"headerlink\" title=\"Initialization\"></a>Initialization</h3><p>This step is necessary to bring the initial credentials on the Keycard instance. When the card is not initialized, it cannot perform any operation. Initialization sets the initial PIN, PUK and pairing password and requires no authentication, but still uses a SecureChannel resistant to passive MITM attacks. Once the card is initialized, it cannot be initialized again (but credentials can be different with a different mechanism with previous authentication).</p>\n<p>Initialization is done with</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Usually, you want to check if the card is initialized before trying to initialize it, otherwise you will receive an</span></span><br><span class=\"line\"><span class=\"comment\">// error.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!info.isInitializedCard()) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// The PIN must be 6 digits, the PUK 12 digits and the pairing password can be any password. </span></span><br><span class=\"line\">  <span class=\"comment\">// All parameters are strings</span></span><br><span class=\"line\">  cmdSet.init(pin, puk, pairingPassword).checkOK();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pairing\"><a href=\"#Pairing\" class=\"headerlink\" title=\"Pairing\"></a>Pairing</h3><p>Clients wishing to communicate with the card, need to pair with it first. This allows creating secure channels resistant not only to passive but also to active MITM attacks. Although pairing allows the card and the client to authenticate each other, the card does not grant access to any operation with the wallet until the user is authenticated (by verifying its PIN). To establish the pairing, the client needs to know the pairing password. After it is established, the pairing info (not the password) must be stored as securely as possible on the client for subsequent sessions. You should store the pairing information together with the instance UID to simplify handling of multiple cards.</p>\n<p>Only 5 clients can be paired at once, but it is possible to unpair previously paired clients.</p>\n<p>Using the SDK, pairing is a simple operation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pairingPassword is usually provided by the user. This method throws an exception if pairing fails.</span></span><br><span class=\"line\">cmdSet.autoPair(pairingPassword);</span><br><span class=\"line\"><span class=\"comment\">// Retrieves the pairing object from the command set. This is what must be persisted (together with the instance UID)</span></span><br><span class=\"line\">Pairing pairing = cmdSet.getPairing();</span><br><span class=\"line\"><span class=\"comment\">// The pairing object can be serialized by calling</span></span><br><span class=\"line\">pairing.toByteArray();</span><br><span class=\"line\"><span class=\"comment\">// or the convenience method</span></span><br><span class=\"line\">pairing.toBase64();</span><br></pre></td></tr></table></figure>\n<p>If you have already paired, you should instead load the persisted pairing information in the command set</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// serializedPairing can be either the byte array or base64 string representation</span></span><br><span class=\"line\">Pairing pairing = <span class=\"keyword\">new</span> Pairing(serializedPairing);</span><br><span class=\"line\"><span class=\"comment\">// Sets the pairing info in the command set. This must be done before further operation is possible</span></span><br><span class=\"line\">cmdSet.setPairing(pairing);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Secure-Channel\"><a href=\"#Secure-Channel\" class=\"headerlink\" title=\"Secure Channel\"></a>Secure Channel</h3><p>After a pairing has been established, a secure channel can be opened. Before opening a secure channel, the card won’t allow sending any command. This guarantees secrecy, integrity and authenticity of the commands. Opening a secure channel must be performed every time the applet is selected (this means also after a power loss). After opening it, the SDK handles the secure channel transparently, encrypting and signing all command APDUs and decrypting and verifying the signature of all responses. To open a secure channel all you need to do is</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmdSet.autoOpenSecureChannel();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Authenticating-the-user\"><a href=\"#Authenticating-the-user\" class=\"headerlink\" title=\"Authenticating the user\"></a>Authenticating the user</h3><p>Most operations with the card (all involving operations with the wallet or credentials) require authenticating the user. After authentication, the user remains authenticated until the card is powered off or the application is re-selected.</p>\n<p>Authentication is performed by verifying the user PIN. Note that this piece of information is sensitive and must be handled accordingly in the application. PIN verification is done with a single step</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pin is the user PIN as a string of 6 digits</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  cmdSet.verifyPIN(pin).checkAuthOK();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(WrongPINException e) &#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"Number of remaining attempts: \"</span> + e.getRetryAttempts());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>if the PIN is wrong, you will receive an error SW in the format 0x63CX where X is the number of attempts remaining. When the number of remaining attempts is 0, the card is blocked. The user must then enter the PUK and a new PIN to restore access to the card. The maximum number of retries for the PUK is 5. To simplify things, the <code>APDUResponse.checkAuthOK()</code> method can be used to verify if the authentication was correct, and if not throw a <code>WrongPINException</code> which contains the number of remaining attempts.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmdSet.unblockPIN(puk, newPIN).checkAuthOK();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Creating-a-wallet\"><a href=\"#Creating-a-wallet\" class=\"headerlink\" title=\"Creating a wallet\"></a>Creating a wallet</h2><p>To actually use the Keycard, it needs to have a wallet. This can be achieved in several different ways, which one you choose depends on your usage scenario. Creating a wallet requires user authentication and is possible even if a wallet already exists on the card (the new wallet replaces the old one). Use the <code>ApplicationInfo.hasMasterKey()</code> method to determine if the card already has a wallet or not. Note that the response of the <code>KeycardCommandSet.loadKey</code> method contains the key UID of the created wallet. This UID can be stored to keep track of this specific wallet in the client. The UID is tied to the key itself (is derived from the public key) so it will change if the wallet on card is replaced. The key UID is also part of the response of the applet selection command, so the wallet can be identified immediately upon selection.</p>\n<h3 id=\"Creating-a-BIP39-mnemonic-phrase\"><a href=\"#Creating-a-BIP39-mnemonic-phrase\" class=\"headerlink\" title=\"Creating a BIP39 mnemonic phrase\"></a>Creating a BIP39 mnemonic phrase</h3><p>This method is great for interoperability with other wallets. The card can assist in creating the mnemonic phrase, since it features a TRNG. Generating the mnemonic itself does not require user authentication (since it does not modify the card state), but loading the key derived from it does. Example of the entire procedure is below</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Generates a Mnemonic object from the card. You can choose between generating 12, 15, 18, 21 or 24 words</span></span><br><span class=\"line\">Mnemonic mnemonic = <span class=\"keyword\">new</span> Mnemonic(cmdSet.generateMnemonic(KeycardCommandSet.GENERATE_MNEMONIC_12_WORDS).checkOK().getData());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We need to set a wordlist if we plan using this object to derive the binary seed. We can set our own list or we can</span></span><br><span class=\"line\"><span class=\"comment\">// fatch the official BIP39 english word list as shown below.</span></span><br><span class=\"line\">mnemonic.fetchBIP39EnglishWordlist();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If we did not verify the PIN before, we can do it now</span></span><br><span class=\"line\">cmdSet.verifyPIN(pin).checkOK();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Loads the key generated from the mnemonic phrase.</span></span><br><span class=\"line\">cmdSet.loadKey(mnemonic.toBIP32KeyPair()).checkOK();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Importing-a-wallet-from-BIP39-mnemonic-phrase\"><a href=\"#Importing-a-wallet-from-BIP39-mnemonic-phrase\" class=\"headerlink\" title=\"Importing a wallet from BIP39 mnemonic phrase\"></a>Importing a wallet from BIP39 mnemonic phrase</h3><p>Importing an existing passphrase requires only the loading step.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The passphrase is a string with space separated words. The password can be any non-null string, usually is empty.</span></span><br><span class=\"line\">cmdSet.loadKey(Mnemonic.toBinarySeed(passphrase, password)).checkOK();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Generating-keys-on-card\"><a href=\"#Generating-keys-on-card\" class=\"headerlink\" title=\"Generating keys on-card\"></a>Generating keys on-card</h3><p>This is the simplest and safest method, because the generated wallet never leaves the card and there is no “paper backup” to keep secure. It is possible to create secure duplicates of the wallet on other Keycards, with a mechanism described in later chapters. Using the SDK, you simply do</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmdSet.generateKey().checkOK();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Importing-an-EC-keypair\"><a href=\"#Importing-an-EC-keypair\" class=\"headerlink\" title=\"Importing an EC keypair\"></a>Importing an EC keypair</h3><p>You can import on the keycard any EC keypair on the SECP256k1 curve, with or without the BIP32 extension. If your import a key without the BIP32 extension, then key derivation will not work, but you will still be able to use the Keycard for signing transactions using the imported key. This scenario can be useful if you are migrating from a wallet not using BIP39 passphrases or for wallets following some custom generation rules. It is however generally preferable to use one of the methods presented above.</p>\n<p>An example of key import is</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// privKey is the S component of the key, as a 32-byte long byte array</span></span><br><span class=\"line\"><span class=\"comment\">// chainCode is the extension to the keypair defined by BIP32, this is another 32-byte long byte array. Can be null, in</span></span><br><span class=\"line\"><span class=\"comment\">// which case the created wallet won't be BIP32 compatible.</span></span><br><span class=\"line\"><span class=\"comment\">// pubKey is the DER encoded, uncompressed public key. Can be null, in which case it is automatically calculated from</span></span><br><span class=\"line\"><span class=\"comment\">// the private key.</span></span><br><span class=\"line\">BIP32KeyPair keypair = <span class=\"keyword\">new</span> BIP32KeyPair(privKey, chainCode, pubKey);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Loads the keypair</span></span><br><span class=\"line\">cmdSet.loadKey(keypair).checkOK();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Key-derivation\"><a href=\"#Key-derivation\" class=\"headerlink\" title=\"Key derivation\"></a>Key derivation</h2><p>As mentioned before, the Keycard is a BIP32 compatible wallet. This means that it can perform key derivation as defined by the BIP32 specification in order to create a hierarchical deterministic wallet. When deriving a key, this key becomes active, which means that it will be used for all signing operations until a key with a different path is derived. The active key is persisted across sessions, meaning that a power loss or applet reselection does not reset it.</p>\n<p>When creating or importing a wallet to the Keycard, the active key is the master key. Unless you imported a non-BIP32 compatible wallet, you usually want to set the active key to a currency account by following the BIP44 specifications for paths. Note that the maximum depth of the key path is 10, excluding the master key.</p>\n<p>Key derivation requires user authentication</p>\n<p>Since a line of code is worth a thousand words, below is an example of deriving a standard key path</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmdSet.deriveKey(<span class=\"string\">\"m/44'/0'/0'/0/0\"</span>).checkOK();</span><br></pre></td></tr></table></figure>\n<p>Since deriving a key is an expensive operation, you usually want to know what the current path is before performing derivation. You can do this with</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// you can then get is as a string with currentPath.toString()</span></span><br><span class=\"line\">KeyPath currentPath = <span class=\"keyword\">new</span> KeyPath(cmdSet.getStatus(KeycardCommandSet.GET_STATUS_P1_KEY_PATH).checkOK().getData());</span><br></pre></td></tr></table></figure>\n<p>To speed up operations, key derivation can be started not only from the master key, but also from the parent or the current key. The path in this case starts respectively with “../“ and “./“. You cannot navigate the hierarchy with multiple “..” in the paths, because only the direct parent of the current key is cached. Derivation from parent is especially convenient when switching between accounts of the same type. Example</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Derive the main account</span></span><br><span class=\"line\">cmdSet.deriveKey(<span class=\"string\">\"m/44'/0'/0'/0/0\"</span>).checkOK();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// switch a secondary account, equivalent to \"m/44'/0'/0'/0/1\" but much faster</span></span><br><span class=\"line\">cmdSet.deriveKey(<span class=\"string\">\"../1\"</span>).checkOK();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// you can switch back and forth between siblings without limitations.</span></span><br><span class=\"line\">cmdSet.deriveKey(<span class=\"string\">\"../0\"</span>).checkOK();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Signing\"><a href=\"#Signing\" class=\"headerlink\" title=\"Signing\"></a>Signing</h2><p>Your Keycard has been initialized, has a wallet and you have derived the keypath you need. You can now perform transactions by signing them with the card. Since the Keycard has no user input/output capabilities, it would be useless to transfer the entire transaction to the card for signing. You should instead calculate the transaction hash, according to the rules of the cryptocurrency you are handling and send that for signature instead. This also means, that you can handle anything which requires ECDSA signatures over SECP256k1 curve, regardless of the used hashing algorithm (at the condition that it output a 256-bit hash of course). This opens the door to signing transactions for the most common cryptocurrencies, but also makes it usable outside the realm of crypto transactions.</p>\n<p>Signing is done as</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hash is the hash to sign, for example the Keccak-256 hash of an Ethereum transaction</span></span><br><span class=\"line\"><span class=\"comment\">// the signature object contains r, s, recId and the public key associated to this signature</span></span><br><span class=\"line\">RecoverableSignature signature = <span class=\"keyword\">new</span> RecoverableSignature(hash, cmdSet.sign(hash).checkOK().getData());</span><br></pre></td></tr></table></figure>\n<p>Signing requires user authentication.</p>\n<h2 id=\"Exporting-public-or-EIP-1581-compliant-keys\"><a href=\"#Exporting-public-or-EIP-1581-compliant-keys\" class=\"headerlink\" title=\"Exporting (public or EIP-1581 compliant) keys\"></a>Exporting (public or EIP-1581 compliant) keys</h2><p>Sorry for the long title, but let’s make it immediately clear: the keys used to sign transactions never leave the card and cannot be exported. You can however export any public key as well as the private key of keypaths defined in the <a href=\"https://eips.ethereum.org/EIPS/eip-1581\" target=\"_blank\" rel=\"noopener\">EIP-1581 specifications</a>. Those keys, by design, are not to be used for transactions but are instead usable for operations with lower security concerns where caching or storing the key outside the card might be beneficial from an UX point of view. Of course, exporting a key always requires user authentication.</p>\n<h3 id=\"Exporting-the-current-key\"><a href=\"#Exporting-the-current-key\" class=\"headerlink\" title=\"Exporting the current key\"></a>Exporting the current key</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Exports the current public key. This is allowed for any key path</span></span><br><span class=\"line\">BIP32KeyPair publicKey = BIP32KeyPair.fromTLV(cmdSet.exportCurrentKey(<span class=\"keyword\">true</span>).checkOK().getData());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Exports the entire key pair. This is only allowed for key path following the EIP-1581 definition</span></span><br><span class=\"line\">BIP32KeyPair keypair = BIP32KeyPair.fromTLV(cmdSet.exportCurrentKey(<span class=\"keyword\">false</span>).checkOK().getData());</span><br></pre></td></tr></table></figure>\n<h3 id=\"Derive-amp-export\"><a href=\"#Derive-amp-export\" class=\"headerlink\" title=\"Derive &amp; export\"></a>Derive &amp; export</h3><p>The export command is very powerful, since it allows you to derive &amp; export a key in one step. You have the option to make the derived and exported key active or leave the active key untouched. You can also decide whether to export only the public key or the entire keypair (following the rules defined above).</p>\n<p>A very convenient use case is deriving an account key and retrieving the public key in one step. This is faster than doing it with two commands (derive key and export public), because every command processed has some overhead. Example</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The first parameter is the keypath, the second tells whether that you want to make the derived &amp; exported key active</span></span><br><span class=\"line\"><span class=\"comment\">// and the third tells that you only want the public key to be exported.</span></span><br><span class=\"line\">BIP32KeyPair publicKey = BIP32KeyPair.fromTLV(cmdSet.exportKey(<span class=\"string\">\"m/44'/0'/0'/0/0\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>).checkOK().getData());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The line above is equivalent to</span></span><br><span class=\"line\"><span class=\"comment\">// cmdSet.deriveKey(\"m/44'/0'/0'/0/0\").checkOK();</span></span><br><span class=\"line\"><span class=\"comment\">// BIP32KeyPair publicKey = BIP32KeyPair.fromTLV(cmdSet.exportCurrentKey(true).checkOK().getData());</span></span><br></pre></td></tr></table></figure>\n<p>Another use case, is to export keys defined by EIP-1581 without changing the current active key, since you won’t be signing with the exported key using the card</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Let's assume the current active path is \"m/44'/0'/0'/0/0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The first parameter is the key path, the second tells that you do not want to make it current and the third that you</span></span><br><span class=\"line\"><span class=\"comment\">// want the entire keypair, not only the public key</span></span><br><span class=\"line\">BIP32KeyPair keypair = BIP32KeyPair.fromTLV(cmdSet.exportKey(<span class=\"string\">\"m/43'/60'/1581'/0'/0\"</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>).checkOK().getData());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// At this point, the current active path would still be \"m/44'/0'/0'/0/0\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Changing-credentials\"><a href=\"#Changing-credentials\" class=\"headerlink\" title=\"Changing credentials\"></a>Changing credentials</h2><p>All credentials of the Keycard can be changed (PIN, PUK, pairing password). Changing the pairing password does not invalidate existing pairings, but applies to the ones which can be created in the future. Changing credentials, requires user authentication.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Changes the user PIN</span></span><br><span class=\"line\">cmdSet.changePIN(<span class=\"string\">\"123456\"</span>).checkOK();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Changes the PUK</span></span><br><span class=\"line\">cmdSet.changePUK(<span class=\"string\">\"123456123456\"</span>).checkOK();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Changes the pairing password</span></span><br><span class=\"line\">cmdSet.changePairingPassword(<span class=\"string\">\"my pairing password\"</span>).checkOK();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Duplication\"><a href=\"#Duplication\" class=\"headerlink\" title=\"Duplication\"></a>Duplication</h2><p>Card duplication is especially relevant when the keys have been generated on-card, without using BIP39 mnemonic (or when this has been destroyed). To make duplication secure the client must not possess the (full) encryption key. For this reason, a scheme where multiple clients are used and none of them has the full key has been devised. From the user point of view, the duplication process goes like this</p>\n<ol>\n<li>Take the card to be duplicated (source) and one or more cards to duplicate to (target)</li>\n<li>On one of the user’s clients initiate the duplication. This involves entering the PIN of each of the involved cards</li>\n<li>Tap all cards to one or more additional clients (the amount must be defined before, the order is irrelevant). These clients do not need to be paired or be trusted, so the user can borrow a friend’s phone without compromising security. This step does not require entering a PIN</li>\n<li>On one of the user’s clients, usually the same which initiated the duplication (must be paired, trusted) finalize the duplication by first tapping the source card and then all target cards, again inserting the PIN for each.</li>\n</ol>\n<p>At the end of procedure, each card will have the same master key, but PIN, PUK and pairing key remain unchanged and are independent from each other. A client could propose changing them to be all the same if desired or do this automatically. All cards are fully functional, so at this point there isn’t any difference between the source card and the targets.</p>\n<p>Since the cards are still protected by the PIN, these can be stored remotely in moderately trusted places to recover from lost or destroyed cards. The duplication has been performed securely since no client ever had the full encryption key and no authentication credentials has been inserted on untrusted clients. For flexibility reason, an arbitrary number of clients can be used. Using a single client could be convenient from an UX point of view, but relies on said client not being compromised. Using 2 or 3 clients greatly increases security. More than 3 clients is probably an overkill.</p>\n<p>From an implementation point of view, we have two different roles a client can take</p>\n<ol>\n<li>The trusted client, starting and performing the duplication</li>\n<li>The (possibly) untrusted clients, only adding entropy to the encryption key</li>\n</ol>\n<p>Both can be implemented by using the <code>CardDuplicator</code> class. On each client, the same instance of the <code>CardDuplicator</code> class must be used for the entire duplication process, otherwise duplication will fail.</p>\n<p>The trusted client must also provide an implementation of <code>DuplicatorCallback</code>. This is needed to retrieve the Pairing and PIN for each card. Example below</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDuplicatorCB</span> <span class=\"keyword\">implements</span> <span class=\"title\">DuplicatorCallback</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">Pairing <span class=\"title\">getPairing</span><span class=\"params\">(ApplicationInfo applicationInfo)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// The Instance UID is the one to use when storing/retrieving pairings</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] uid = applicationInfo.getInstanceUID();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Using the UID try to retrieve the pairing. The method getSavedPairing is an example and is not part of the SDK,</span></span><br><span class=\"line\">    <span class=\"comment\">// you are responsible of how you store and retrieve pairing data in your app</span></span><br><span class=\"line\">    Pairing pairing = getSavedPairing(uid);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Optionally, you could prompt the user and make a new pairing if none if given, but this is an UX decision in</span></span><br><span class=\"line\">    <span class=\"comment\">// your application.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pairing == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      pairing = tryToPair();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// possibly null, in this case the operation requiring pairing is aborted</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pairing;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">getPIN</span><span class=\"params\">(ApplicationInfo applicationInfo, <span class=\"keyword\">int</span> remainingAttempts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Optionally, you might have a cache of PINs for recently used card, but this should be done carefully as the PIN</span></span><br><span class=\"line\">    <span class=\"comment\">// is sensitive data. You might instead want to just prompt the user each time.</span></span><br><span class=\"line\">    String pin = getCachedPIN(applicationInfo.getInstanceUID());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pin == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// prompt the user to insert the PIN. You can optionally inform them about how many retry attempts are left.</span></span><br><span class=\"line\">      <span class=\"comment\">// For UX reason you could also use the instance UID to show the user an identifiable name, this is again</span></span><br><span class=\"line\">      <span class=\"comment\">// application specific.</span></span><br><span class=\"line\">      pin = promptUser(remainingAttempts);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// This must not be null. PIN verification will be performed by the CardDuplicator itself, do no not perform it here!</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The next step to do, is instantiating a CardDuplicator.</p>\n<p>For the trusted client</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The cmdSet is a KeycardCommandSet instance, duplicatorCallback is an object implementing the DuplicatorCallback</span></span><br><span class=\"line\"><span class=\"comment\">// interface</span></span><br><span class=\"line\">cardDuplicator = <span class=\"keyword\">new</span> CardDuplicator(cmdSet, duplicatorCallback);</span><br></pre></td></tr></table></figure>\n<p>For the untrusted clients</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// apduChannel is a CardChannel instance. Alternatively the same constructor as for the trusted client can be used,</span></span><br><span class=\"line\"><span class=\"comment\">// passing null as the second parameter.</span></span><br><span class=\"line\">cardDuplicator = <span class=\"keyword\">new</span> CardDuplicator(apduChannel);</span><br></pre></td></tr></table></figure>\n<p>Once the instance has been created, depending on the role and state the client must perform a specific action every time a new card is presented. The CardDuplicator keeps track of the action performed on any card, so if the user presents the same card twice an <code>IllegalStateException</code> exception is thrown.</p>\n<p>To start duplication on a card, for example, you might do</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Client count is the amount of devices contributing to forming the entire key. This means 1 + the number of clients</span></span><br><span class=\"line\"><span class=\"comment\">// which will be adding entropy (the untrusted clients)</span></span><br><span class=\"line\">cardDuplicator.startDuplication(clientCount);</span><br></pre></td></tr></table></figure>\n<p>On untrusted clients, to add entropy, you do</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cardDuplicator.addEntropy();</span><br></pre></td></tr></table></figure>\n<p>When the full key has been stored on all cards, you then call the following method on the source card on a trusted client</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] exportedKey = cardDuplicator.exportKey();</span><br></pre></td></tr></table></figure>\n<p>whereas, from the same client, you invoke on all target cards the following</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// you should then check that the keyUID matches the one of the source card to be sure that the duplication has been</span></span><br><span class=\"line\"><span class=\"comment\">// performed correctly.</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] keyUID = cardDuplicator.importKey(exportedKey);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"menu":{"docs":"/docs/","blog":"https://our.status.im/incubate"},"languages":{"en":"English"},"sidebar":{"api":{"API":{"overview":"index.html"},"Tutorials":{"learn_more":"../tutorials/"}},"tutorials":{"start":{"start_here":"index.html"},"by_lanaguge":{"go":"go_tutorial.html"},"Api":{"back_to_api":"../api/"}}}}},"excerpt":"","more":"<h2 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h2><p>You can import the SDK in your Gradle or Maven project using <a href=\"https://jitpack.io\" target=\"_blank\" rel=\"noopener\">Jitpack.io</a>. If using Gradle, to use<br>JitPack all you have to do is insert these lines in you <code>build.gradle</code> file</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">  repositories &#123;</span><br><span class=\"line\">    maven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Then, you must import the correct dependency. In case you are building an Android-based project, you need to add this line</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  implementation <span class=\"string\">'com.github.status-im.status-keycard-java:android:2.0.0'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>If you are working on the desktop, then you need this line instead</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  implementation <span class=\"string\">'com.github.status-im.status-keycard-java:desktop:2.0.0'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In both case, you will have the same SDK, except for the way connection with the card is established.</p>\n<h2 id=\"Connecting-to-the-card-Android\"><a href=\"#Connecting-to-the-card-Android\" class=\"headerlink\" title=\"Connecting to the card (Android)\"></a>Connecting to the card (Android)</h2><p>On Android, the NFC connection handling must happen on a thread separate from the UI thread. The SDK provides the class <code>NFCCardManager</code> to handle this. This an example activity starting the NFC reader and handling the connection to the card. Refer to the comments in the example for more information.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> NfcAdapter nfcAdapter;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> NFCCardManager cardManager;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Get the Android NFC default adapter</span></span><br><span class=\"line\">    nfcAdapter = NfcAdapter.getDefaultAdapter(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Create the NFCCardManager, this class is provided by the Keycard SDK and handles connections to the card</span></span><br><span class=\"line\">    cardManager = <span class=\"keyword\">new</span> NFCCardManager();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The Card Listener receives the connected/disconnected events. These can happen at any time since the user can</span></span><br><span class=\"line\">    <span class=\"comment\">// introduce or remove the card to/from the field at any time. This is where your code goes.</span></span><br><span class=\"line\">    cardManager.setCardListener(<span class=\"keyword\">new</span> CardListener() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onConnected</span><span class=\"params\">(CardChannel cardChannel)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Card is connected. Here you can start working with the Keycard. The CardChannel is what you will use to</span></span><br><span class=\"line\">        <span class=\"comment\">// communicate with the card.</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDisconnected</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Card is disconnected (was removed from the field). You can perform cleanup here.</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    cardManager.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// We need to enable the reader on resume.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nfcAdapter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      nfcAdapter.enableReaderMode(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.cardManager, NfcAdapter.FLAG_READER_NFC_A | NfcAdapter.FLAG_READER_SKIP_NDEF_CHECK, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// We disable the reader on pause to allow other apps to use it.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nfcAdapter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      nfcAdapter.disableReaderMode(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Connecting-to-the-card-Desktop\"><a href=\"#Connecting-to-the-card-Desktop\" class=\"headerlink\" title=\"Connecting to the card (Desktop)\"></a>Connecting to the card (Desktop)</h2><p>On the desktop we use the javax.smartcardio library. There are several ways to handle connections, the important part is getting a CardChannel open. Below is an example of how this can be achieved (assumes that a single smartcard reader is connected).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// We create a TerminalFactory object</span></span><br><span class=\"line\">TerminalFactory tf = TerminalFactory.getDefault();</span><br><span class=\"line\">CardTerminal cardTerminal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We search a terminal with a card inside</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (CardTerminal t : tf.terminals().list()) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (t.isCardPresent()) &#123;</span><br><span class=\"line\">  cardTerminal = t;</span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If not found, we throw an exception. Of course you should decide how to handle this situation</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (cardTerminal == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No terminal found\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If a terminal is found, we connect to it</span></span><br><span class=\"line\">Card apduCard = cardTerminal.connect(<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We create a PCSCCardChannel, which is an implementation of CardChannel and can be used with the rest of the SDK.</span></span><br><span class=\"line\">PCSCCardChannel apduChannel = <span class=\"keyword\">new</span> PCSCCardChannel(apduCard.getBasicChannel());</span><br></pre></td></tr></table></figure>\n<h2 id=\"Working-with-the-card\"><a href=\"#Working-with-the-card\" class=\"headerlink\" title=\"Working with the card\"></a>Working with the card</h2><p>Regardless whether you are on Android or desktop, you should at this point have an implementation of the CardChannel interface (be it NFCCardChannel or PCSCCardChannel). You can now start working with the card. The first thing to do is creating a <code>KeycardCommandSet</code> instance. This class gives access to all of the applet functionality, wrapping the low-level APDUs in easy to use methods. All other classes in the SDK are helper to format parameters and parse responses from the card. To create a command set, just do</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cardChannel is our CardChannel instance</span></span><br><span class=\"line\">KeycardCommandSet cmdSet = <span class=\"keyword\">new</span> KeycardCommandSet(cardChannel);</span><br></pre></td></tr></table></figure>\n<p>Modern SmartCards can have several applications installed, so after connection with the card you need to select the Keycard applet. This is easily done with</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The checkOK method can be called on any APDUResponse object to confirm that the</span></span><br><span class=\"line\">cmdSet.select().checkOK();</span><br></pre></td></tr></table></figure>\n<p>While this correctly selects the applet, it discards the card response, which contains information that can be useful to identify this specific card and its state. For this reason we could rewrite this as</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ApplicationInfo info = <span class=\"keyword\">new</span> ApplicationInfo(cmdSet.select().checkOK().getData());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This method tells if the card is initialized (has a PIN, PUK and pairing password). If it is not, it must be</span></span><br><span class=\"line\"><span class=\"comment\">// initialized and no other operation is possible. Note that initialization touches only credentials to authenticate</span></span><br><span class=\"line\"><span class=\"comment\">// the user or the client, but does not touch the creation of a wallet on the card</span></span><br><span class=\"line\">info.isInitializedCard();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns the instance UID of the applet. This can be used to identify this specific applet instance, very</span></span><br><span class=\"line\"><span class=\"comment\">// useful when storing instance-specific data on the client (pairing info, cached data, etc).</span></span><br><span class=\"line\">info.getInstanceUID();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns the version of the applet.</span></span><br><span class=\"line\">info.getAppVersion();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns the number of free pairing slots. If you are not yet paired with the card, it helps you know if you can still</span></span><br><span class=\"line\"><span class=\"comment\">// pair or not</span></span><br><span class=\"line\">info.getFreePairingSlots());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tells if the card has a wallet or not. If no wallet is available, you must create once before you can perform most</span></span><br><span class=\"line\"><span class=\"comment\">// operations on the card</span></span><br><span class=\"line\">info.hasMasterKey();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Returns the UID of the master key of the wallet. The UID is value generated starting from the public key and is </span></span><br><span class=\"line\"><span class=\"comment\">// useful to identify if the card has the expected wallet.</span></span><br><span class=\"line\">info.getKeyUID();</span><br></pre></td></tr></table></figure>\n<p>After the applet is selected, you can start working with it. Note that the application remains selected until another applet is explicitly selected, or the card is powered off (for example is removed from the field)</p>\n<h3 id=\"Initialization\"><a href=\"#Initialization\" class=\"headerlink\" title=\"Initialization\"></a>Initialization</h3><p>This step is necessary to bring the initial credentials on the Keycard instance. When the card is not initialized, it cannot perform any operation. Initialization sets the initial PIN, PUK and pairing password and requires no authentication, but still uses a SecureChannel resistant to passive MITM attacks. Once the card is initialized, it cannot be initialized again (but credentials can be different with a different mechanism with previous authentication).</p>\n<p>Initialization is done with</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Usually, you want to check if the card is initialized before trying to initialize it, otherwise you will receive an</span></span><br><span class=\"line\"><span class=\"comment\">// error.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!info.isInitializedCard()) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// The PIN must be 6 digits, the PUK 12 digits and the pairing password can be any password. </span></span><br><span class=\"line\">  <span class=\"comment\">// All parameters are strings</span></span><br><span class=\"line\">  cmdSet.init(pin, puk, pairingPassword).checkOK();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pairing\"><a href=\"#Pairing\" class=\"headerlink\" title=\"Pairing\"></a>Pairing</h3><p>Clients wishing to communicate with the card, need to pair with it first. This allows creating secure channels resistant not only to passive but also to active MITM attacks. Although pairing allows the card and the client to authenticate each other, the card does not grant access to any operation with the wallet until the user is authenticated (by verifying its PIN). To establish the pairing, the client needs to know the pairing password. After it is established, the pairing info (not the password) must be stored as securely as possible on the client for subsequent sessions. You should store the pairing information together with the instance UID to simplify handling of multiple cards.</p>\n<p>Only 5 clients can be paired at once, but it is possible to unpair previously paired clients.</p>\n<p>Using the SDK, pairing is a simple operation</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pairingPassword is usually provided by the user. This method throws an exception if pairing fails.</span></span><br><span class=\"line\">cmdSet.autoPair(pairingPassword);</span><br><span class=\"line\"><span class=\"comment\">// Retrieves the pairing object from the command set. This is what must be persisted (together with the instance UID)</span></span><br><span class=\"line\">Pairing pairing = cmdSet.getPairing();</span><br><span class=\"line\"><span class=\"comment\">// The pairing object can be serialized by calling</span></span><br><span class=\"line\">pairing.toByteArray();</span><br><span class=\"line\"><span class=\"comment\">// or the convenience method</span></span><br><span class=\"line\">pairing.toBase64();</span><br></pre></td></tr></table></figure>\n<p>If you have already paired, you should instead load the persisted pairing information in the command set</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// serializedPairing can be either the byte array or base64 string representation</span></span><br><span class=\"line\">Pairing pairing = <span class=\"keyword\">new</span> Pairing(serializedPairing);</span><br><span class=\"line\"><span class=\"comment\">// Sets the pairing info in the command set. This must be done before further operation is possible</span></span><br><span class=\"line\">cmdSet.setPairing(pairing);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Secure-Channel\"><a href=\"#Secure-Channel\" class=\"headerlink\" title=\"Secure Channel\"></a>Secure Channel</h3><p>After a pairing has been established, a secure channel can be opened. Before opening a secure channel, the card won’t allow sending any command. This guarantees secrecy, integrity and authenticity of the commands. Opening a secure channel must be performed every time the applet is selected (this means also after a power loss). After opening it, the SDK handles the secure channel transparently, encrypting and signing all command APDUs and decrypting and verifying the signature of all responses. To open a secure channel all you need to do is</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmdSet.autoOpenSecureChannel();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Authenticating-the-user\"><a href=\"#Authenticating-the-user\" class=\"headerlink\" title=\"Authenticating the user\"></a>Authenticating the user</h3><p>Most operations with the card (all involving operations with the wallet or credentials) require authenticating the user. After authentication, the user remains authenticated until the card is powered off or the application is re-selected.</p>\n<p>Authentication is performed by verifying the user PIN. Note that this piece of information is sensitive and must be handled accordingly in the application. PIN verification is done with a single step</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pin is the user PIN as a string of 6 digits</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  cmdSet.verifyPIN(pin).checkAuthOK();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(WrongPINException e) &#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"Number of remaining attempts: \"</span> + e.getRetryAttempts());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>if the PIN is wrong, you will receive an error SW in the format 0x63CX where X is the number of attempts remaining. When the number of remaining attempts is 0, the card is blocked. The user must then enter the PUK and a new PIN to restore access to the card. The maximum number of retries for the PUK is 5. To simplify things, the <code>APDUResponse.checkAuthOK()</code> method can be used to verify if the authentication was correct, and if not throw a <code>WrongPINException</code> which contains the number of remaining attempts.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmdSet.unblockPIN(puk, newPIN).checkAuthOK();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Creating-a-wallet\"><a href=\"#Creating-a-wallet\" class=\"headerlink\" title=\"Creating a wallet\"></a>Creating a wallet</h2><p>To actually use the Keycard, it needs to have a wallet. This can be achieved in several different ways, which one you choose depends on your usage scenario. Creating a wallet requires user authentication and is possible even if a wallet already exists on the card (the new wallet replaces the old one). Use the <code>ApplicationInfo.hasMasterKey()</code> method to determine if the card already has a wallet or not. Note that the response of the <code>KeycardCommandSet.loadKey</code> method contains the key UID of the created wallet. This UID can be stored to keep track of this specific wallet in the client. The UID is tied to the key itself (is derived from the public key) so it will change if the wallet on card is replaced. The key UID is also part of the response of the applet selection command, so the wallet can be identified immediately upon selection.</p>\n<h3 id=\"Creating-a-BIP39-mnemonic-phrase\"><a href=\"#Creating-a-BIP39-mnemonic-phrase\" class=\"headerlink\" title=\"Creating a BIP39 mnemonic phrase\"></a>Creating a BIP39 mnemonic phrase</h3><p>This method is great for interoperability with other wallets. The card can assist in creating the mnemonic phrase, since it features a TRNG. Generating the mnemonic itself does not require user authentication (since it does not modify the card state), but loading the key derived from it does. Example of the entire procedure is below</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Generates a Mnemonic object from the card. You can choose between generating 12, 15, 18, 21 or 24 words</span></span><br><span class=\"line\">Mnemonic mnemonic = <span class=\"keyword\">new</span> Mnemonic(cmdSet.generateMnemonic(KeycardCommandSet.GENERATE_MNEMONIC_12_WORDS).checkOK().getData());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We need to set a wordlist if we plan using this object to derive the binary seed. We can set our own list or we can</span></span><br><span class=\"line\"><span class=\"comment\">// fatch the official BIP39 english word list as shown below.</span></span><br><span class=\"line\">mnemonic.fetchBIP39EnglishWordlist();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// If we did not verify the PIN before, we can do it now</span></span><br><span class=\"line\">cmdSet.verifyPIN(pin).checkOK();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Loads the key generated from the mnemonic phrase.</span></span><br><span class=\"line\">cmdSet.loadKey(mnemonic.toBIP32KeyPair()).checkOK();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Importing-a-wallet-from-BIP39-mnemonic-phrase\"><a href=\"#Importing-a-wallet-from-BIP39-mnemonic-phrase\" class=\"headerlink\" title=\"Importing a wallet from BIP39 mnemonic phrase\"></a>Importing a wallet from BIP39 mnemonic phrase</h3><p>Importing an existing passphrase requires only the loading step.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The passphrase is a string with space separated words. The password can be any non-null string, usually is empty.</span></span><br><span class=\"line\">cmdSet.loadKey(Mnemonic.toBinarySeed(passphrase, password)).checkOK();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Generating-keys-on-card\"><a href=\"#Generating-keys-on-card\" class=\"headerlink\" title=\"Generating keys on-card\"></a>Generating keys on-card</h3><p>This is the simplest and safest method, because the generated wallet never leaves the card and there is no “paper backup” to keep secure. It is possible to create secure duplicates of the wallet on other Keycards, with a mechanism described in later chapters. Using the SDK, you simply do</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmdSet.generateKey().checkOK();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Importing-an-EC-keypair\"><a href=\"#Importing-an-EC-keypair\" class=\"headerlink\" title=\"Importing an EC keypair\"></a>Importing an EC keypair</h3><p>You can import on the keycard any EC keypair on the SECP256k1 curve, with or without the BIP32 extension. If your import a key without the BIP32 extension, then key derivation will not work, but you will still be able to use the Keycard for signing transactions using the imported key. This scenario can be useful if you are migrating from a wallet not using BIP39 passphrases or for wallets following some custom generation rules. It is however generally preferable to use one of the methods presented above.</p>\n<p>An example of key import is</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// privKey is the S component of the key, as a 32-byte long byte array</span></span><br><span class=\"line\"><span class=\"comment\">// chainCode is the extension to the keypair defined by BIP32, this is another 32-byte long byte array. Can be null, in</span></span><br><span class=\"line\"><span class=\"comment\">// which case the created wallet won't be BIP32 compatible.</span></span><br><span class=\"line\"><span class=\"comment\">// pubKey is the DER encoded, uncompressed public key. Can be null, in which case it is automatically calculated from</span></span><br><span class=\"line\"><span class=\"comment\">// the private key.</span></span><br><span class=\"line\">BIP32KeyPair keypair = <span class=\"keyword\">new</span> BIP32KeyPair(privKey, chainCode, pubKey);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Loads the keypair</span></span><br><span class=\"line\">cmdSet.loadKey(keypair).checkOK();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Key-derivation\"><a href=\"#Key-derivation\" class=\"headerlink\" title=\"Key derivation\"></a>Key derivation</h2><p>As mentioned before, the Keycard is a BIP32 compatible wallet. This means that it can perform key derivation as defined by the BIP32 specification in order to create a hierarchical deterministic wallet. When deriving a key, this key becomes active, which means that it will be used for all signing operations until a key with a different path is derived. The active key is persisted across sessions, meaning that a power loss or applet reselection does not reset it.</p>\n<p>When creating or importing a wallet to the Keycard, the active key is the master key. Unless you imported a non-BIP32 compatible wallet, you usually want to set the active key to a currency account by following the BIP44 specifications for paths. Note that the maximum depth of the key path is 10, excluding the master key.</p>\n<p>Key derivation requires user authentication</p>\n<p>Since a line of code is worth a thousand words, below is an example of deriving a standard key path</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmdSet.deriveKey(<span class=\"string\">\"m/44'/0'/0'/0/0\"</span>).checkOK();</span><br></pre></td></tr></table></figure>\n<p>Since deriving a key is an expensive operation, you usually want to know what the current path is before performing derivation. You can do this with</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// you can then get is as a string with currentPath.toString()</span></span><br><span class=\"line\">KeyPath currentPath = <span class=\"keyword\">new</span> KeyPath(cmdSet.getStatus(KeycardCommandSet.GET_STATUS_P1_KEY_PATH).checkOK().getData());</span><br></pre></td></tr></table></figure>\n<p>To speed up operations, key derivation can be started not only from the master key, but also from the parent or the current key. The path in this case starts respectively with “../“ and “./“. You cannot navigate the hierarchy with multiple “..” in the paths, because only the direct parent of the current key is cached. Derivation from parent is especially convenient when switching between accounts of the same type. Example</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Derive the main account</span></span><br><span class=\"line\">cmdSet.deriveKey(<span class=\"string\">\"m/44'/0'/0'/0/0\"</span>).checkOK();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// switch a secondary account, equivalent to \"m/44'/0'/0'/0/1\" but much faster</span></span><br><span class=\"line\">cmdSet.deriveKey(<span class=\"string\">\"../1\"</span>).checkOK();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// you can switch back and forth between siblings without limitations.</span></span><br><span class=\"line\">cmdSet.deriveKey(<span class=\"string\">\"../0\"</span>).checkOK();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Signing\"><a href=\"#Signing\" class=\"headerlink\" title=\"Signing\"></a>Signing</h2><p>Your Keycard has been initialized, has a wallet and you have derived the keypath you need. You can now perform transactions by signing them with the card. Since the Keycard has no user input/output capabilities, it would be useless to transfer the entire transaction to the card for signing. You should instead calculate the transaction hash, according to the rules of the cryptocurrency you are handling and send that for signature instead. This also means, that you can handle anything which requires ECDSA signatures over SECP256k1 curve, regardless of the used hashing algorithm (at the condition that it output a 256-bit hash of course). This opens the door to signing transactions for the most common cryptocurrencies, but also makes it usable outside the realm of crypto transactions.</p>\n<p>Signing is done as</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hash is the hash to sign, for example the Keccak-256 hash of an Ethereum transaction</span></span><br><span class=\"line\"><span class=\"comment\">// the signature object contains r, s, recId and the public key associated to this signature</span></span><br><span class=\"line\">RecoverableSignature signature = <span class=\"keyword\">new</span> RecoverableSignature(hash, cmdSet.sign(hash).checkOK().getData());</span><br></pre></td></tr></table></figure>\n<p>Signing requires user authentication.</p>\n<h2 id=\"Exporting-public-or-EIP-1581-compliant-keys\"><a href=\"#Exporting-public-or-EIP-1581-compliant-keys\" class=\"headerlink\" title=\"Exporting (public or EIP-1581 compliant) keys\"></a>Exporting (public or EIP-1581 compliant) keys</h2><p>Sorry for the long title, but let’s make it immediately clear: the keys used to sign transactions never leave the card and cannot be exported. You can however export any public key as well as the private key of keypaths defined in the <a href=\"https://eips.ethereum.org/EIPS/eip-1581\" target=\"_blank\" rel=\"noopener\">EIP-1581 specifications</a>. Those keys, by design, are not to be used for transactions but are instead usable for operations with lower security concerns where caching or storing the key outside the card might be beneficial from an UX point of view. Of course, exporting a key always requires user authentication.</p>\n<h3 id=\"Exporting-the-current-key\"><a href=\"#Exporting-the-current-key\" class=\"headerlink\" title=\"Exporting the current key\"></a>Exporting the current key</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Exports the current public key. This is allowed for any key path</span></span><br><span class=\"line\">BIP32KeyPair publicKey = BIP32KeyPair.fromTLV(cmdSet.exportCurrentKey(<span class=\"keyword\">true</span>).checkOK().getData());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Exports the entire key pair. This is only allowed for key path following the EIP-1581 definition</span></span><br><span class=\"line\">BIP32KeyPair keypair = BIP32KeyPair.fromTLV(cmdSet.exportCurrentKey(<span class=\"keyword\">false</span>).checkOK().getData());</span><br></pre></td></tr></table></figure>\n<h3 id=\"Derive-amp-export\"><a href=\"#Derive-amp-export\" class=\"headerlink\" title=\"Derive &amp; export\"></a>Derive &amp; export</h3><p>The export command is very powerful, since it allows you to derive &amp; export a key in one step. You have the option to make the derived and exported key active or leave the active key untouched. You can also decide whether to export only the public key or the entire keypair (following the rules defined above).</p>\n<p>A very convenient use case is deriving an account key and retrieving the public key in one step. This is faster than doing it with two commands (derive key and export public), because every command processed has some overhead. Example</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The first parameter is the keypath, the second tells whether that you want to make the derived &amp; exported key active</span></span><br><span class=\"line\"><span class=\"comment\">// and the third tells that you only want the public key to be exported.</span></span><br><span class=\"line\">BIP32KeyPair publicKey = BIP32KeyPair.fromTLV(cmdSet.exportKey(<span class=\"string\">\"m/44'/0'/0'/0/0\"</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>).checkOK().getData());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The line above is equivalent to</span></span><br><span class=\"line\"><span class=\"comment\">// cmdSet.deriveKey(\"m/44'/0'/0'/0/0\").checkOK();</span></span><br><span class=\"line\"><span class=\"comment\">// BIP32KeyPair publicKey = BIP32KeyPair.fromTLV(cmdSet.exportCurrentKey(true).checkOK().getData());</span></span><br></pre></td></tr></table></figure>\n<p>Another use case, is to export keys defined by EIP-1581 without changing the current active key, since you won’t be signing with the exported key using the card</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Let's assume the current active path is \"m/44'/0'/0'/0/0\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The first parameter is the key path, the second tells that you do not want to make it current and the third that you</span></span><br><span class=\"line\"><span class=\"comment\">// want the entire keypair, not only the public key</span></span><br><span class=\"line\">BIP32KeyPair keypair = BIP32KeyPair.fromTLV(cmdSet.exportKey(<span class=\"string\">\"m/43'/60'/1581'/0'/0\"</span>, <span class=\"keyword\">false</span>, <span class=\"keyword\">false</span>).checkOK().getData());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// At this point, the current active path would still be \"m/44'/0'/0'/0/0\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Changing-credentials\"><a href=\"#Changing-credentials\" class=\"headerlink\" title=\"Changing credentials\"></a>Changing credentials</h2><p>All credentials of the Keycard can be changed (PIN, PUK, pairing password). Changing the pairing password does not invalidate existing pairings, but applies to the ones which can be created in the future. Changing credentials, requires user authentication.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Changes the user PIN</span></span><br><span class=\"line\">cmdSet.changePIN(<span class=\"string\">\"123456\"</span>).checkOK();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Changes the PUK</span></span><br><span class=\"line\">cmdSet.changePUK(<span class=\"string\">\"123456123456\"</span>).checkOK();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Changes the pairing password</span></span><br><span class=\"line\">cmdSet.changePairingPassword(<span class=\"string\">\"my pairing password\"</span>).checkOK();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Duplication\"><a href=\"#Duplication\" class=\"headerlink\" title=\"Duplication\"></a>Duplication</h2><p>Card duplication is especially relevant when the keys have been generated on-card, without using BIP39 mnemonic (or when this has been destroyed). To make duplication secure the client must not possess the (full) encryption key. For this reason, a scheme where multiple clients are used and none of them has the full key has been devised. From the user point of view, the duplication process goes like this</p>\n<ol>\n<li>Take the card to be duplicated (source) and one or more cards to duplicate to (target)</li>\n<li>On one of the user’s clients initiate the duplication. This involves entering the PIN of each of the involved cards</li>\n<li>Tap all cards to one or more additional clients (the amount must be defined before, the order is irrelevant). These clients do not need to be paired or be trusted, so the user can borrow a friend’s phone without compromising security. This step does not require entering a PIN</li>\n<li>On one of the user’s clients, usually the same which initiated the duplication (must be paired, trusted) finalize the duplication by first tapping the source card and then all target cards, again inserting the PIN for each.</li>\n</ol>\n<p>At the end of procedure, each card will have the same master key, but PIN, PUK and pairing key remain unchanged and are independent from each other. A client could propose changing them to be all the same if desired or do this automatically. All cards are fully functional, so at this point there isn’t any difference between the source card and the targets.</p>\n<p>Since the cards are still protected by the PIN, these can be stored remotely in moderately trusted places to recover from lost or destroyed cards. The duplication has been performed securely since no client ever had the full encryption key and no authentication credentials has been inserted on untrusted clients. For flexibility reason, an arbitrary number of clients can be used. Using a single client could be convenient from an UX point of view, but relies on said client not being compromised. Using 2 or 3 clients greatly increases security. More than 3 clients is probably an overkill.</p>\n<p>From an implementation point of view, we have two different roles a client can take</p>\n<ol>\n<li>The trusted client, starting and performing the duplication</li>\n<li>The (possibly) untrusted clients, only adding entropy to the encryption key</li>\n</ol>\n<p>Both can be implemented by using the <code>CardDuplicator</code> class. On each client, the same instance of the <code>CardDuplicator</code> class must be used for the entire duplication process, otherwise duplication will fail.</p>\n<p>The trusted client must also provide an implementation of <code>DuplicatorCallback</code>. This is needed to retrieve the Pairing and PIN for each card. Example below</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDuplicatorCB</span> <span class=\"keyword\">implements</span> <span class=\"title\">DuplicatorCallback</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">Pairing <span class=\"title\">getPairing</span><span class=\"params\">(ApplicationInfo applicationInfo)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// The Instance UID is the one to use when storing/retrieving pairings</span></span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] uid = applicationInfo.getInstanceUID();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Using the UID try to retrieve the pairing. The method getSavedPairing is an example and is not part of the SDK,</span></span><br><span class=\"line\">    <span class=\"comment\">// you are responsible of how you store and retrieve pairing data in your app</span></span><br><span class=\"line\">    Pairing pairing = getSavedPairing(uid);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Optionally, you could prompt the user and make a new pairing if none if given, but this is an UX decision in</span></span><br><span class=\"line\">    <span class=\"comment\">// your application.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pairing == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      pairing = tryToPair();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// possibly null, in this case the operation requiring pairing is aborted</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pairing;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\">String <span class=\"title\">getPIN</span><span class=\"params\">(ApplicationInfo applicationInfo, <span class=\"keyword\">int</span> remainingAttempts)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Optionally, you might have a cache of PINs for recently used card, but this should be done carefully as the PIN</span></span><br><span class=\"line\">    <span class=\"comment\">// is sensitive data. You might instead want to just prompt the user each time.</span></span><br><span class=\"line\">    String pin = getCachedPIN(applicationInfo.getInstanceUID());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pin == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// prompt the user to insert the PIN. You can optionally inform them about how many retry attempts are left.</span></span><br><span class=\"line\">      <span class=\"comment\">// For UX reason you could also use the instance UID to show the user an identifiable name, this is again</span></span><br><span class=\"line\">      <span class=\"comment\">// application specific.</span></span><br><span class=\"line\">      pin = promptUser(remainingAttempts);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// This must not be null. PIN verification will be performed by the CardDuplicator itself, do no not perform it here!</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pin;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The next step to do, is instantiating a CardDuplicator.</p>\n<p>For the trusted client</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The cmdSet is a KeycardCommandSet instance, duplicatorCallback is an object implementing the DuplicatorCallback</span></span><br><span class=\"line\"><span class=\"comment\">// interface</span></span><br><span class=\"line\">cardDuplicator = <span class=\"keyword\">new</span> CardDuplicator(cmdSet, duplicatorCallback);</span><br></pre></td></tr></table></figure>\n<p>For the untrusted clients</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// apduChannel is a CardChannel instance. Alternatively the same constructor as for the trusted client can be used,</span></span><br><span class=\"line\"><span class=\"comment\">// passing null as the second parameter.</span></span><br><span class=\"line\">cardDuplicator = <span class=\"keyword\">new</span> CardDuplicator(apduChannel);</span><br></pre></td></tr></table></figure>\n<p>Once the instance has been created, depending on the role and state the client must perform a specific action every time a new card is presented. The CardDuplicator keeps track of the action performed on any card, so if the user presents the same card twice an <code>IllegalStateException</code> exception is thrown.</p>\n<p>To start duplication on a card, for example, you might do</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Client count is the amount of devices contributing to forming the entire key. This means 1 + the number of clients</span></span><br><span class=\"line\"><span class=\"comment\">// which will be adding entropy (the untrusted clients)</span></span><br><span class=\"line\">cardDuplicator.startDuplication(clientCount);</span><br></pre></td></tr></table></figure>\n<p>On untrusted clients, to add entropy, you do</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">cardDuplicator.addEntropy();</span><br></pre></td></tr></table></figure>\n<p>When the full key has been stored on all cards, you then call the following method on the source card on a trusted client</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] exportedKey = cardDuplicator.exportKey();</span><br></pre></td></tr></table></figure>\n<p>whereas, from the same client, you invoke on all target cards the following</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// you should then check that the keyUID matches the one of the source card to be sure that the duplication has been</span></span><br><span class=\"line\"><span class=\"comment\">// performed correctly.</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] keyUID = cardDuplicator.importKey(exportedKey);</span><br></pre></td></tr></table></figure>\n"}],"Post":[{"title":"Status Incubate","_content":"\n# Status Incubate Begins!","source":"_posts/2018-10-04-incubate.md","raw":"title: Status Incubate\n---\n\n# Status Incubate Begins!","slug":"incubate","published":1,"date":"2018-10-04T00:00:00.000Z","updated":"2018-12-12T10:19:20.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpl2x2zh0001gkqekmip0jif","content":"<h1 id=\"Status-Incubate-Begins\"><a href=\"#Status-Incubate-Begins\" class=\"headerlink\" title=\"Status Incubate Begins!\"></a>Status Incubate Begins!</h1>","site":{"data":{"menu":{"docs":"/docs/","blog":"https://our.status.im/incubate"},"languages":{"en":"English"},"sidebar":{"api":{"API":{"overview":"index.html"},"Tutorials":{"learn_more":"../tutorials/"}},"tutorials":{"start":{"start_here":"index.html"},"by_lanaguge":{"go":"go_tutorial.html"},"Api":{"back_to_api":"../api/"}}}}},"excerpt":"","more":"<h1 id=\"Status-Incubate-Begins\"><a href=\"#Status-Incubate-Begins\" class=\"headerlink\" title=\"Status Incubate Begins!\"></a>Status Incubate Begins!</h1>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}